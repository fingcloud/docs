[{"name":"mongodb","title":"MongoDB","description":"نحوه‌ی ساختن دیتابیس MongoDB بر روی سکوی ابری فینگ.","href":"/database/mongodb","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\nimport { Notice } from \"components/Notice\";\n\n<Platform>\n  <PlatformHead title=\"دیتابیس MongoDB\" src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original.svg\" />\n</Platform>\n\n# راه‌اندازی دیتابیس Mongodb در فینگ\n\n- از قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی دکمه **ساخت برنامه جدید** کلیک کرده و گزینه **دیتابیس** را انتخاب کنید.\n\n![create db](/images/db-create.jpg)\n\n- بر روی دیتابیس **mongodb** کلیک کنید.\n\n![choose db](/images/db-choose-mongo.jpg)\n\n- نام برنامه و نسخه mongodb که می‌خواهید نصب شود و نوع شبکه(داخلی -عمومی) آن را انتخاب نمایید.\n\n![db name](/images/db-mongo-create.jpg)\n\n## فعال کردن replica\n\nبا فعال کردن گزینه **replica** می‌توانید از قابلیت **trancaction** در mongodb بهره‌مند شوید.\n\n**Replication** این امکان را می‌دهد که با ایجاد کپی‌های متعدد از داده‌های خود در سرورها، دسترسی به داده‌ها را افزایش داد. این امر به ویژه در صورت خرابی سرور یا وقفه در سرویس یا خرابی سخت افزار مفید می‌باشد.\n\n<Notice variant=\"info\">\n  درصورت خاموش بودن <b>تیک شبکه عمومی</b>، امکان اتصال از طریق اینترنت و\n  برنامه‌‌های مدیریت دیتابیس را نخواهید داشت و ارتباط فقط داخلی خواهد بود.\n</Notice>\n\n- در پایان پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا دیتابیس شما در کمترین زمان ممکن راه‌اندازی شود.\n\n![choose plan](/images/choose-plan.jpg)\n\nبعد از اتمام مراحل نصب و راه‌اندازی، بر روی گزینه **برنامه‌ها** کلیک کنید تا به صفحه‌ی لیست برنامه‌‌ها وارد شوید.\n\n## نحوه اتصال به دیتابیس mongodb\n\nاز صفحه‌ی برنامه‌ها، دیتابیس ‌mongodb که نصب کرده‌اید را انتخاب کنید تا اطلاعات آن را مشاهده نمایید.\n\n### اتصال به برنامه‌ی موجود در فینگ\n\nاگر قصد دارید دیتابیس خود را به یکی از برنامه‌‌های خود در **فینگ** متصل کنید، کافیست لینک اتصال را کپی کرده و از قسمت لیست **برنامه‌‌ها** بر روی برنامه‌ی مورد نظر کلیک کنید و وارد بخش [متغیرها](/references/environment-variables) شوید و یک متغیر جدید با نام دلخواه خود ایجاد کرده و لینک اتصال کپی شده را به عنوان **مقدار** آن جای گذاری کنید.\n\n![db connection](/images/db-mongo-external-connection.jpg)\n\n### اتصال به دیتابیس منیجرها\n\nچنانچه قصد دارید برای مدیریت داده‌‌های دیتابیس خود از نرم افزارهای‌ **مدیریت دیتابیس(database manager)** استفاده کنید. بعد از نصب نرم افزار مورد نظر، اطلاعات لینک اتصال را وارد نمایید تا بتوانید به **mongodb** که در **فینگ** ساخته‌اید متصل شوید.\n\n### اتصال به لوکال‌هاست\n\n- برای اتصال به دیتابیس از طریق لوکال، گزینه‌ی **کانکشن** را انتخاب نمایید و لینک کانکشن داخلی را کپی کرده و استفاده کنید.\n\n![db connection](/images/db-mongo-internal-connection.jpg)\n"},{"name":"mysql","title":"Mysql","description":"آموزش ساختن دیتابیس Mysql بر روی سکوی ابری فینگ.","href":"/database/mysql","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\nimport { Notice } from \"components/Notice\";\n\n<Platform>\n  <PlatformHead title=\"دیتابیس Mysql\" src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/mysql/mysql-original-wordmark.svg\" />\n</Platform>\n\n# راه‌اندازی دیتابیس Mysql در فینگ\n\n- از قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی دکمه **ساخت برنامه جدید** کلیک کرده و گزینه **دیتابیس** را انتخاب کنید.\n\n![create db](/images/db-create.jpg)\n\n- بر روی دیتابیس **mysql** کلیک کنید.\n\n![choose db](/images/db-choose-mysql.jpg)\n\n- نام برنامه و نسخه mysql که می‌خواهید نصب شود و نوع شبکه(داخلی -عمومی) آن را انتخاب نمایید.\n\n![db name](/images/db-mysql-create.jpg)\n\n<Notice variant=\"info\">\n  درصورت خاموش بودن <b>تیک شبکه عمومی</b>، امکان اتصال از طریق اینترنت و\n  برنامه‌‌های مدیریت دیتابیس را نخواهید داشت و ارتباط فقط داخلی خواهد بود.\n</Notice>\n\n- در پایان پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا دیتابیس شما در کمترین زمان ممکن راه‌اندازی شود.\n\n![choose plan](/images/choose-plan.jpg)\n\nبعد از اتمام مراحل نصب و راه‌اندازی، بر روی گزینه **برنامه‌ها** کلیک کنید تا به صفحه‌ی لیست برنامه‌‌ها وارد شوید.\n\n## نحوه اتصال به دیتابیس mysql\n\nاز صفحه‌ی برنامه‌ها، دیتابیس ‌mysql که نصب کرده‌اید را انتخاب کنید تا اطلاعات آن را مشاهده نمایید.\n\n### اتصال به برنامه‌ی موجود در فینگ\n\nاگر قصد دارید دیتابیس خود را به یکی از برنامه‌‌های خود در **فینگ** متصل کنید، کافیست لینک اتصال را کپی کرده و از قسمت لیست **برنامه‌‌ها** بر روی برنامه‌ی مورد نظر کلیک کنید و وارد بخش [متغیرها](/references/environment-variables) شوید و یک متغیر جدید با نام دلخواه خود ایجاد کرده و لینک اتصال کپی شده را به عنوان **مقدار** آن جای گذاری کنید.\n\n![db connection](/images/db-mysql-external-connection.jpg)\n\n### اتصال به دیتابیس منیجرها\n\nچنانچه قصد دارید برای مدیریت داده‌‌های دیتابیس خود از نرم افزارهای‌ **مدیریت دیتابیس(database manager)** استفاده کنید. بعد از نصب نرم افزار مورد نظر، اطلاعات لینک اتصال را وارد نمایید تا بتوانید به **mysql** که در **فینگ** ساخته‌اید متصل شوید.\n\n### اتصال به لوکال‌هاست\n\nبرای اتصال به دیتابیس از طریق لوکال، گزینه‌ی **کانکشن** را انتخاب نمایید و لینک کانکشن داخلی را کپی کرده و استفاده کنید.\n\n![db connection](/images/db-mysql-internal-connection.jpg)"},{"name":"postgresql","title":"PostgreSql","description":"نحوه‌ی ایجاد دیتابیس PostgreSql بر روی سکوی ابری فینگ.","href":"/database/postgresql","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\nimport { Notice } from \"components/Notice\";\n\n<Platform>\n  <PlatformHead title=\"دیتابیس PostgreSql\" src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/postgresql/postgresql-original-wordmark.svg\" />\n</Platform>\n\n# راه‌اندازی دیتابیس PostgreSql در فینگ\n\n- از قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی دکمه **ساخت برنامه جدید** کلیک کرده و گزینه **دیتابیس** را انتخاب کنید.\n\n![create db](/images/db-create.jpg)\n\n- بر روی دیتابیس **postgresql** کلیک کنید.\n\n![choose db](/images/db-choose-pgsql.jpg)\n\n- نام برنامه و نسخه postgresql که می‌خواهید نصب شود و نوع شبکه(داخلی -عمومی) آن را انتخاب نمایید.\n\n![db name](/images/db-pgsql-create.jpg)\n\n<Notice variant=\"info\">\n  درصورت خاموش بودن <b>تیک شبکه عمومی</b>، امکان اتصال از طریق اینترنت و\n  برنامه‌‌های مدیریت دیتابیس را نخواهید داشت و ارتباط فقط داخلی خواهد بود.\n</Notice>\n\n- در پایان پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا دیتابیس شما در کمترین زمان ممکن راه‌اندازی شود.\n\n![choose plan](/images/choose-plan.jpg)\n\nبعد از اتمام مراحل نصب و راه‌اندازی، بر روی گزینه **برنامه‌ها** کلیک کنید تا به صفحه‌ی لیست برنامه‌‌ها وارد شوید.\n\n## نحوه اتصال به دیتابیس postgresql\n\nاز صفحه‌ی برنامه‌ها، دیتابیس ‌postgresql که نصب کرده‌اید را انتخاب کنید تا اطلاعات آن را مشاهده نمایید.\n\n### اتصال به برنامه‌ی موجود در فینگ\n\nاگر قصد دارید دیتابیس خود را به یکی از برنامه‌‌های خود در **فینگ** متصل کنید، کافیست لینک اتصال را کپی کرده و از قسمت لیست **برنامه‌‌ها** بر روی برنامه‌ی مورد نظر کلیک کنید و وارد بخش [متغیرها](/references/environment-variables) شوید و یک متغیر جدید با نام دلخواه خود ایجاد کرده و لینک اتصال کپی شده را به عنوان **مقدار** آن جای گذاری کنید.\n\n![db connection](/images/db-pgsql-external-connection.jpg)\n\n### اتصال به دیتابیس منیجرها\n\nچنانچه قصد دارید برای مدیریت داده‌‌های دیتابیس خود از نرم افزارهای‌ **مدیریت دیتابیس(database manager)** استفاده کنید. بعد از نصب نرم افزار مورد نظر، اطلاعات لینک اتصال را وارد نمایید تا بتوانید به **postgresql** که در **فینگ** ساخته‌اید متصل شوید.\n\n### اتصال به لوکال‌هاست\n\n- برای اتصال به دیتابیس از طریق لوکال، گزینه‌ی **کانکشن** را انتخاب نمایید و لینک کانکشن داخلی را کپی کرده و استفاده کنید.\n\n![db connection](/images/db-pgsql-internal-connection.jpg)\n"},null,{"name":"angular","title":"Angular","description":"چگونه می‌توانیم برنامه‌های (Angular) را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/angular","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Angular\" icon=\"angularjs/angularjs-original.svg\"/>\n</Platform>\n\n# استقرار برنامه Angular در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nبا وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **angular** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **angular** بوده و عملیات استقرار را آغاز می‌کند.\n- همچنین شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up angular-app --platform=angular\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **angular** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"angular-app\"\nport: 4200\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  react-app\n> angular-app\n  node-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://angular-app.onfing.ir`\n"},{"name":"django","title":"Django","description":"چگونه برنامه django خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/django","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های django\" icon=\"django/django-original.svg\"/>\n</Platform>\n\n# استقرار برنامه‌ Django در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nدر صورت لاگین نبودن، با وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **django** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **django** بوده و عملیات استقرار را آغاز می‌کند.\n- شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up django-app --platform=django\n```\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **django** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"django-app\"\nport: 8000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  node-app\n> django-app\n  static-app\n```\n\n#### فایل requirements.txt\n\nبرای اینکه فینگ برنامه‌ی شما را به عنوان پلتفرم **django** تشخیص دهد، شما باید در ریشه برنامه‌تان، فایلی را با نام **requirements.txt** ایجاد نمایید و ماژول‌های استفاده شده در برنامه را داخل آن قرار دهید تا فینگ در سریع‌ترین زمان ممکن آنها را نصب کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://django-app.onfing.ir`\n"},{"name":"docker","title":"Docker","description":"نحوه‌ی دیپلوی(deploy) کردن پلتفرم داکر (docker) بر روی سکوی ابری فینگ.","href":"/platform/docker","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Docker\" icon=\"docker/docker-original.svg\"/>\n</Platform>\n\n# پشتیبانی فینگ از Docker\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nدر صورت لاگین نبودن، با وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **docker** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` و داشتن **Dockerfile** در ریشه برنامه‌تان، فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **docker** بوده و عملیات استقرار را آغاز می‌کند.\n- شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up docker-app --platform=docker\n```\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** ، **پلتفرم** و **پورت** آن را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه و پلتفرمی که از آن استفاده کردید و پورتی که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را قرار دهید.\n\n```yaml\napp: \"docker-app\"\nplatform: \"docker\"\nport: 3000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n> docker-app\n  node-app\n  static-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://dockerapp.onfing.ir`\n"},{"name":"docusaurus-2","title":"Docusaurus-2","description":"چگونه برنامه docusaurus-2 خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/docusaurus-2","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Docusaurus-2\" src=\"https://fing.ir/images/platforms/docusaurus-2.svg\"/>\n</Platform>\n\n# استقرار برنامه‌ Docusaurus در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nدر صورت لاگین نبودن، با وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **docusaurus-2** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **docusaurus** بوده و عملیات استقرار را آغاز می‌کند.\n- شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up docusaurus-2-app --platform=docusaurus\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **docusaurus-2** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"docusaurus-app\"\nport: 3000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  node-app\n  static-app\n> docusaurus-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://docusaurus-app.onfing.ir`\n"},{"name":"dotnetcore","title":"dotnetcore","description":"نحوه استقرار(deploy) برنامه‌های dotnetcore بر روی سکوی ابری فینگ","href":"/platform/dotnetcore","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Dotnetcore\" src=\"https://fing.ir/images/platforms/dotnetcore.svg\"/>\n</Platform>\n\n# استقرار برنامه Dotnetcore در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nبا وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **dotnetcore** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **dotnetcore** بوده و عملیات استقرار را آغاز می‌کند.\n- همچنین شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up dotnetcore-app --platform=dotnetcore\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **dotnetcore** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"dotnetcore-app\"\nport: 3000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n> dotnetcore-app\n  react-app\n  node-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://dotnetcore-app.onfing.ir`\n"},{"name":"flask","title":"Flask","description":"چگونه برنامه flask خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/flask","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های flask\" icon=\"flask/flask-original.svg\"/>\n</Platform>\n\n# استقرار برنامه‌ Flask در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nدر صورت لاگین نبودن، با وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **flask** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **flask** بوده و عملیات استقرار را آغاز می‌کند.\n- شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up flask-app --platform=flask\n```\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **flask** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"flask-app\"\nport: 8000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  node-app\n> flask-app\n  static-app\n```\n\n#### فایل requirements.txt\n\nبرای اینکه فینگ برنامه‌ی شما را به عنوان پلتفرم **flask** تشخیص دهد، شما باید در ریشه برنامه‌تان، فایلی را با نام **requirements.txt** ایجاد نمایید و ماژول‌های استفاده شده در برنامه را داخل آن قرار دهید تا فینگ در سریع‌ترین زمان ممکن آنها را نصب کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://flask-app.onfing.ir`\n"},{"name":"gatsby","title":"gatsby","description":"نحوه استقرار(deploy) برنامه‌های gatsby بر روی سکوی ابری فینگ","href":"/platform/gatsby","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Gatsby\" icon=\"gatsby/gatsby-original.svg\"/>\n</Platform>\n\n# استقرار برنامه Gatsby در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nبا وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **gatsby** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **gatsby** بوده و عملیات استقرار را آغاز می‌کند.\n- همچنین شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up gatsby-app --platform=gatsby\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **gatsby** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"gatsby-app\"\nport: 3000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n> gatsby-app\n  react-app\n  node-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://gatsby-app.onfing.ir`\n"},{"name":"golang","title":"Golang","description":"چگونه برنامه Golang خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/golang","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\nimport { Notice } from \"components/Notice\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Golang\" icon=\"go/go-original.svg\" />\n</Platform>\n\n# اجرای پروژه‌های Go در فینگ\n\nاین سند رفتار کلی **فینگ** را در رابطه با شناسایی و اجرای برنامه‌های Go توضیح می دهد. برای آگاهی بیشتر در مورد نحوه‌ی استقرار یک برنامه، به بخش [اجرای برنامه Go](quickstar/golang/) مراجعه کنید.\n\nسرور **فینگ** زمانی یک برنامه را به عنوان **برنامه‌ی گولنگ** در نظر می‌گیرد که در ریشه اصلی آن فایل `go.mod` وجود داشته باشد.\n\nهنگامی که یک برنامه‌ی استقرار یافته در فینگ به عنوان **برنامه Go** شناسایی می‌شود، خروجی زیر را مشاهده خواهید کرد.\n\n```bash\n$ fing up\n...\n---> platform: golang\n```\n\n## نسخه‌هایی که پشتیبانی می‌شوند\n\n**فینگ** نسخه‌های مختلفی از ابزار **Go** را در اختیار قرار می‌دهد. نسخه‌هایی که فینگ در حال حاضر پشتیبانی می‌کند:\n`1.18`، `1.17`، `1.16` می‌باشند.\n\n## تعیین نسخه‌ی Golang\n\nبرای اینکه برنامه گولنگ شما بتواند **build** شده و با موفقیت بر روی **سکوی ابری فینگ** مستقر شود، باید نسخه‌ی آن را مشخص نمایید. برای این منظور می‌توانید از روش زیر اقدام کنید:\n\n### استفاده از فایل fing.yaml\n\nمی‌توانید از فایل `fing.yaml` در ریشه پروژه‌تان، برای تعیین نسخه‌ی **golang** استفاده کنید. به اینصورت که در فایل مورد نظر عنوان `build` را وارد کرده و نسخه‌ی آن را مشخص کنید:\n\n```yaml\n# fing.yaml\n...\nbuild:\n  go_version: 1.17\n```\n\nبا استفاده از این روش، فینگ مراحل **استقرار** برنامه شما را با این نسخه‌ی تعیین شده از **go** آغاز خواهد کرد.\n\n### استفاده از نسخه‌ی پیش‌فرض\n\nاگر نسخه‌ی مورد نظر خود را مشخص نکرده باشید، **فینگ** از نسخه‌ی پیش فرض **go** `1.17` برای **ساخت** و **استقرار** برنامه‌ی شما استفاده خواهد کرد.\n\n## روند ساخت یک برنامه go\n\nبرای ساخت و راه‌اندازی برنامه‌ی **golang**، ابتدا **فینگ** کتابخانه‌های برنامه را نصب و سپس مراحل build برنامه را آغاز کرده و با توجه به دستور اجرایی که در برنامه مشخص شده است، یک برنامه گولنگ را اجرا می‌کند.\n\n### نصب کتابخانه‌ها\n\nبرای نصب کتابخانه‌های برنامه **go**، باید در ریشه‌ی اصلی پروژه، فایل `go.mod` وجود داشته باشد. **فینگ** با توجه به کتابخانه‌های موجود در این فایل، اقدام به نصب آنها می‌کند.\n\n<Notice variant=\"info\">\nاگر می‌‌خواهید قبل از نصب کتابخانه‌ها دستور خاصی را اجرا کنید، فایلی با نام <strong>pre-compile</strong> را در  پوشه‌ی <strong>bin</strong> ایجاد کرده و دستورات خود را داخل آن قرار دهید. \n</Notice>\n\n<Notice variant=\"info\">\nاگر قصد دارید بعد از نصب کتابخانه‌ها دستور خاصی را اجرا کنید، فایلی با نام <strong>post-compile</strong> را در  پوشه‌ی <strong>bin</strong> ایجاد کرده و دستورات خود را داخل آن قرار دهید. \n</Notice>\n\n### دستور اجرای برنامه\n\nبرای اینکه برنامه‌ی **گولنگ** به درستی اجرا شود، باید دستور اجرای آن مشخص شده باشد. **فینگ** برای این منظور از روش زیر اقدام به اجرای برنامه می‌کند:\n\n#### با استفاده از Procfile\nدر ریشه‌ی اصلی پروژه فایل `Procfile` را ایجاد کرده و دستوراتی که برای اجرای برنامه مدنظر دارید را در آن قرار دهید. **فینگ**  بعد از استقرار برنامه، بر اساس دستور موجود در **پراک فایل** ، برنامه‌ی شما را اجرا می‌کند.\n\n```json\n// Procfile\nweb: bin/myapp\n```\n\n- اگر در برنامه شما **پراک فایل** موجود نباشد، **فینگ** به دنبال **پکیج** `main` در ریشه پروژه شما می‌گردد و آن را به عنوان دستور اجرای برنامه در نظر می‌گیرد."},{"name":"laravel","title":"Laravel","description":"چگونه برنامه laravel خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/laravel","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Laravel\" icon=\"laravel/laravel-plain.svg\"/>\n</Platform>\n\n# استقرار برنامه‌ Laravel در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nدر صورت لاگین نبودن، با وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار:\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **laravel** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **laravel** بوده و عملیات استقرار را آغاز می‌کند.\n- شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up laravel-app --platform=laravel\n```\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **laravel** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"laravel-app\"\nport: 80\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  php-app\n> laravel-app\n  nest-app\n```\n\n<!-- #### فایل requirements.txt\n\nبرای اینکه فینگ برنامه‌ی شما را به عنوان پلتفرم **laravel** تشخیص دهد، شما باید در ریشه برنامه‌تان، فایلی را با نام **requirements.txt** ایجاد نمایید و ماژول‌های استفاده شده در برنامه را داخل آن قرار دهید تا فینگ در سریع‌ترین زمان ممکن آنها را نصب کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n-->\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://laravel-app.onfing.ir`\n"},{"name":"nest","title":"Nest","description":"چگونه می‌توانیم برنامه‌های (NestJs) را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/nest","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Nest.js\" icon=\"nestjs/nestjs-plain.svg\"/>\n</Platform>\n\n# استقرار برنامه NestJs در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nبا وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **nest** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **nest** بوده و عملیات استقرار را آغاز می‌کند.\n- همچنین شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up nest-app --platform=nest\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **nest** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"nest-app\"\nport: 3000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  react-app\n> nest-app\n  node-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://nest-app.onfing.ir`\n"},{"name":"next","title":"Next.js","description":"چگونه برنامه nextjs خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/next","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Next.js\" icon=\"nextjs/nextjs-original.svg\"/>\n</Platform>\n\n# استقرار برنامه‌ NextJs در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nدر صورت لاگین نبودن، با وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **next** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **next** بوده و عملیات استقرار را آغاز می‌کند.\n- شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up next-app --platform=next\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **next** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"next-app\"\nport: 3000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  node-app\n  static-app\n> next-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://next-app.onfing.ir`\n"},{"name":"node","title":"NodeJS","description":"چگونه برنامه Node خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/node","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\nimport { Notice } from \"components/Notice\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های ‌‌NodeJs\" icon=\"nodejs/nodejs-original.svg\" />\n</Platform>\n\n# اجرای پروژه‌‌های Node در فینگ\n\nاین سند عملکرد کلی **فینگ** در رابطه با شناسایی و اجرای برنامه‌های **Node.js** را توضیح می‌دهد.\nبرای کسب اطلاعات بیشتر در مورد نحوه‌ی استقرار برنامه، به بخش [اجرای برنامه Node](/quickstart/node) مراجعه نمایید.\n\nزمانی برنامه شما به عنوان پلتفرم Node در نظر گرفته می‌شود که در ریشه اصلی برنامه‌تان فایل `package.json` وجود داشته باشد.\n\n## نسخه‌هایی که پشتیبانی می‌شوند\n\n**فینگ** از نسخه‌ی جدید و همچنین از نسخه‌های فعال **TLS** (Long-Term-Support) نود پشتیبانی می‌کند.\n\nهمانطور که در جدول انتشار Node.js در زیر نشان داده شده است، نسخه‌های Node.js که در حال حاضر **فینگ** از آنها پشتیبانی می‌کند `14`، `16` و `18` می‌باشند.\n\n![node version](/images/node-version.svg)\n\n## تعیین نسخه‌ی Node.js\n\nهمیشه نسخه‌ای را برای برنامه‌ی خود انتخاب کنید که با زمان اجرا که در حال توسعه و آزمایش آن هستید مطابقت داشته باشد. برای اطلاع از نسخه‌ی نود سیستم خود، دستور زیر را اجرا کنید:\n\n```bash\n$ node --version\nv16.13.1\n```\n\n### استفاده از فایل fing.yaml\n\nمی‌توانید برای تعیین نسخه‌ی node برنامه‌تان از فایل `fing.yaml` استفاده نمایید. به اینصورت که در فایل مورد نظر عنوان `build` را وارد کرده و نسخه‌ی آن را مشخص کنید.\n\n```yaml\n# fing.yaml\n...\nbuild:\n  node_version: 14\n```\n\nبا این روش، سرور **فینگ** مراحل **استقرار** برنامه‌ی شما را با این نسخه از node آغاز می‌کند.\n\n### استفاده از فایل package.json\n\nبرای مشخص کردن نسخه‌ی node برنامه‌ی خود، می‌توانید فایل `package.json` را باز کرده و در قسمت `engines` نسخه‌ی node را برای استفاده در **فینگ** مشخص کنید.\n\n```json\n// package.json\n{\n  \"name\": \"appname\",\n  \"description\": \"\",\n  \"version\": \"1.0.0\",\n  \"engines\": {\n    \"node\": \"16.13.0\"\n  }\n}\n```\n\nدر این روش سرور **فینگ** آخرین نسخه از عددی که مشخص کرده‌اید را استفاده خواهد کرد. به عنوان مثال اگر شما نسخه‌ی `16.13.0` را انتخاب کرده باشید، اما نسخه‌ی جدیدتری از node یعنی `16.13.1` موجود باشد، سرور فینگ مراحل **استقرار** برنامه شما را بر اساس نسخه‌ی جدیدتر آغاز خواهد کرد.\n\n### استفاده از نسخه‌ی پیش‌فرض\n\nاگر نسخه‌ی مورد نظر خود را مشخص نکرده باشید، **فینگ** از نسخه‌ی پیش فرض node `14` برای استقرار و ساخت برنامه‌ی شما استفاده خواهد کرد.\n\n## روند ساخت یک برنامه node\n\nبرای ساخت و راه‌اندازی برنامه‌ی node، ابتدا **فینگ**  وابستگی‌‌های برنامه را با توجه به پکیج منیجر استفاده شده در پروژه نصب می‌کند. سپس مراحل build برنامه را آغاز کرده و با توجه به دستور اجرایی که در برنامه مشخص شده است، یک برنامه نود را اجرا می‌کند. \n\n### نصب کتابخانه‌ها\n\nپروژه های **Node** یا با [پکیج منیجر npm](https://npmjs.com) و یا با [پکیج منیجر yarn](https://yarnpkg.com) ساخته می‌شوند.\n\nاگر در ریشه پروژه‌‌تان فایل `yarn.lock` داشته باشید، **فینگ** برای نصب وابستگی‌ها و اجرای اسکریپت‌ها از ` yarn install` استفاده خواهد کرد. و اگر در پروژه‌ی خود فایل `package-lock.json` داشته باشید **فینگ** برای نصب وابستگی‌‌ها از دستور `nmp ci` استفاده می‌کند. در غیر اینصورت از `npm install` استفاده خواهد شد.\n\n<Notice variant=\"info\">\n  توصیه می‌شود برای اینکه وابستگی‌های برنامه‌ی شما به راحتی نصب گردند حتما یکی از\n  این دو فایل را در ریشه پروژه‌ی خود داشته باشید.\n</Notice>\n\nبه‌طور پیش‌فرض، **فینگ** همه وابستگی‌هایی که در فایل `package.json` تحت عنوان **dependencies** و **devDependencies** فهرست شده‌اند را نصب می‌کند.\n\nپس از اجرای مراحل نصب و ساخت، **فینگ** پکیج‌های اعلام شده تحت **devDependencies** را قبل از استقرار برنامه حذف می‌کند.\n\n### دستور اجرای برنامه\n\nبرای اجرای موفق برنامه‌ی خود باید دستور اجرای آن را مشخص کرده باشید. برای این منظور **فینگ** به یکی از دو روش زیر اقدام می‌کند:\n\n#### با استفاده از Procfile\n\nاگر برای اجرای برنامه‌ی خود دستورات خاصی را در نظر دارید می‌توانید در ریشه اصلی پروژه خود فایلی به نام **Procfile** ایجاد کنید و دستورات خود را در آن قرار دهید تا **فینگ** بر اساس همان دستور برنامه‌ی شما را جهت استقرار آماده سازی نماید.\n\n```procfile\nweb: npm start\n```\n\n#### با استفاده از package.json\n\nاگر در برنامه شما **پراک‌ فایل**  یافت نشود، **فینگ** به سراغ فایل `package.json` می‌رود و بر اساس دستور `start` که در `scripts` قرار داده‌اید، برنامه‌ی شما را اجرا خواهد کرد.\n\n```json\n// package.json\n...\n\"scripts\": {\n  ...\n  \"start\":\"npm start\"\n}\n```\n"},{"name":"nuxt","title":"Nuxt","description":"چگونه می‌توانیم برنامه‌های (NuxtJs) را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/nuxt","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Nuxt.js\" icon=\"nuxtjs/nuxtjs-original.svg\"/>\n</Platform>\n\n# استقرار برنامه NuxtJs در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nبا وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **nuxt** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **nuxt** بوده و عملیات استقرار را آغاز می‌کند.\n- همچنین شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up nuxt-app --platform=nuxt\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **nuxt** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"nuxt-app\"\nport: 3000\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  react-app\n> nuxt-app\n  node-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://nuxt-app.onfing.ir`\n"},{"name":"php","title":"Php","description":"چگونه برنامه php خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/php","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\nimport { Notice } from \"components/Notice\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Php\" icon=\"php/php-original.svg\" />\n</Platform>\n\n# اجرای پروژه‌های PHP در فینگ\n\nاین سند رفتار کلی **فینگ** را در رابطه با شناسایی و اجرای برنامه‌های php توضیح می دهد. برای آگاهی بیشتر در مورد نحوه‌ی استقرار یک برنامه، به بخش [اجرای برنامه Php](quickstar/php/) مراجعه کنید.\n\nفینگ استقرار و مقیاس‌پذیری برنامه‌‌های php را آسان می‌کند.\n\nسرور **فینگ** زمانی یک برنامه را به عنوان **برنامه‌ی php** در نظر می‌گیرد که در ریشه اصلی آن فایل `composer.json` وجود داشته باشد. در این صورت یعنی پروژه شما از یکی از **فریمورک‌های پی‌اچ‌پی** استفاده می‌کند.\nو اگر در ریشه برنامه فایل `index.php` باشد، **فینگ** آن را به عنوان یک برنامه‌ی **php** معمولی در نظر می‌گیرد.\n\nهنگامی که یک برنامه‌ی استقرار یافته در فینگ به عنوان **برنامه php** شناسایی می‌شود، خروجی زیر را مشاهده خواهید کرد:\n\n```bash\n$ fing up\n...\n---> platform: php\n```\n\n## نسخه‌هایی که پشتیبانی می‌شوند\n\n**فینگ** نسخه‌های مختلفی از ابزار **php** را در اختیار قرار می‌دهد. نسخه‌هایی که فینگ در حال حاضر پشتیبانی می‌کند:\n`7.2`، `7.3`، `7.4`، `8.0`، `8.1` می‌باشند.\n\n<Notice variant=\"warning\">\n  نسخه <strong>php 7.4</strong> در حالت تعمیر و نگهداری امنیتی می‌باشد و در\n  پایان سال 2022 به طور کامل به پایان می رسد. و فقط تعمیرات امنیتی حیاتی توسط\n  گروه php برای این سری نسخه‌ها ارائه می شود. توصیه می‌شود برنامه‌های{\" \"}\n  <strong>php 7</strong> خود را به نسخه <strong>php 8</strong> ارتقاء دهید. برای\n  اطلاعات بیشتر در مورد جدول زمانی پشتیبانی از نسخه های php، به صفحه{\" \"}\n  <a href=\"https://php.net/supported-versions.php\">\n   نسخه‌های پشتیبانی شده\n  </a>{\" \"}\n  در وب سایت رسمی php مراجعه کنید.\n</Notice>\n\n## تعیین نسخه‌ی Php\n\nبرای اینکه برنامه php شما بتواند **build** شده و با موفقیت بر روی **سکوی ابری فینگ** مستقر شود، باید نسخه‌ی آن را مشخص نمایید. برای این منظور می‌توانید به یکی از روش‌های زیر اقدام کنید:\n\n### استفاده از فایل fing.yaml\n\nمی‌توانید از فایل `fing.yaml` در ریشه پروژه‌تان، برای تعیین نسخه‌ی **php** استفاده کنید. به اینصورت که در فایل مورد نظر عنوان `build` را وارد کرده و نسخه‌ی آن را مشخص کنید:\n\n```yaml\n# fing.yaml\n...\nbuild:\n  php_version: 7.4\n```\n\nبا استفاده از این روش، فینگ مراحل **استقرار** برنامه شما را با این نسخه‌ی تعیین شده از **php** آغاز خواهد کرد.\n\n### با استفاده از فایل composer.json\n\nمی‌توانید فایل `composer.json`  را باز کرده و نسخه برنامه **php** خود را مشخص کنید. **فینگ**  بر اساس نسخه‌ی مشخص شده، مراحل استقرار برنامه پی‌اچ‌پی را آغاز می‌کند.\n\n```json\n// composer.json\n...\n\"require\": {\n    \"php\": \"7.4\"\n  }\n```\n\n### استفاده از نسخه‌ی پیش‌فرض\n\nاگر نسخه‌ی مورد نظر خود را مشخص نکرده باشید، **فینگ** از نسخه‌ی پیش فرض `php 7.4` برای **ساخت** و **استقرار** برنامه‌ی شما استفاده خواهد کرد.\n\n## روند ساخت یک برنامه php\n\nبرای ساخت و راه‌اندازی برنامه‌ی **php**، ابتدا **فینگ** کتابخانه‌های برنامه را نصب و سپس مراحل build برنامه را آغاز کرده و با توجه به دستور اجرایی که در برنامه مشخص شده است، یک برنامه پی‌اچ‌پی را اجرا می‌کند.\n\n### نصب کتابخانه‌ها\n\nبرای نصب کتابخانه‌های برنامه php, حتما باید در ریشه اصلی پروژه خود، فایل `composer.lock` وجود داشته باشد.**فینگ** به طور پیش فرض همه وابستگی‌هایی که در فایل `composer.json` تحت عنوان **require-dev** می‌باشند را نصب خواهد کرد.\n\n- فینگ به طور پیش فرض **extension** های زیر را برای برنامه‌‌های **php** نصب می‌کند:\n\n`bcmath`\n`bz2`\n`gd`\n`exif`\n`pcntl`\n`mysqli`\n`pdo_mysql`\n`pdo_pgsql`\n`mongodb`\n`pgsql`\n`soap`\n`redis`\n`zip`\n\n- اگر قصد دارید **اکستنشن‌های** دیگری برای برنامه‌ی خود نصب کنید، کافیست در ریشه اصلی پروژه‌ی خود فایلی را با نام `php-extensions.txt` ایجاد کرده و اکستنشن‌های مد نظر خود را به شکل زیر وارد کنید:\n\n```json\n// php-extensions.txt\nbrotli\nbzip2\n```\n\nدقت داشته باشید که هر اکستنشن در یک خط جداگانه باشد.\n\n- همچنین می‌توانید برای برنامه‌ی خود، **ماژول‌های آپاچی** را نصب کنید. برای این منظور در ریشه اصلی پروژه خود فایلی با نام `apache-modules.txt` ایجاد کرده و ماژول‌های مد نظر خود را در آن قرار دهید:\n\n```json\n// apache-modules.txt\nmod_ssl\nmod_rewrite\n```\n\n### دستور اجرای برنامه\n\n- **فینگ** به طور پیش فرض برنامه‌‌های **php** را با **Apache** اجرا می‌کند.\n\n"},{"name":"python","title":"Python","description":"چگونه برنامه python خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/python","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\nimport { Notice } from \"components/Notice\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های python\" icon=\"python/python-original.svg\" />\n</Platform>\n\n# اجرای پروژه‌های Python در فینگ\n\nدر این سند نحوه‌ی عملکرد کلی **فینگ** در رابطه با شناسایی و اجرای برنامه‌های **Python** را توضیح می‌دهد.\nبرای کسب اطلاعات بیشتر در مورد چگونگی استقرار برنامه پایتون، به بخش [اجرای برنامه Python](/quickstart/python) مراجعه نمایید.\n\nاگر فهرست اصلی برنامه‌ی شما شامل فایل `requirements.txt` باشد، **فینگ** بطور خودکار آن را به عنوان یک برنامه **پایتون** شناسایی می‌کند.\n\nهنگامی که در فینگ یک برنامه مستقر به عنوان یک برنامه پایتون شناسایی شود، این را در خروجی ساخت مشاهده خواهید کرد:\n\n```bash\n$ fing up\n...\n---> platform: python\n```\n\n## نسخه‌هایی که پشتیبانی می‌شوند\n\nدر حال حاضر **فینگ** از نسخه‌های `3.8`، `3.9`، `3.10` و همچنین از نسخه‌ی `2.7` پشتیبانی می‌کند.\n\n<Notice variant=\"warning\">\n  با توجه به اعلام پایان کار <strong>python-2</strong> از سوی تیم توسعه دهنده‌ی\n  آن، توصیه می‌شود برای جلوگیری از باگ‌های امنیتی احتمالی در برنامه‌‌های خود،\n  پروژه‌‌های خود را به <strong>python-3</strong> منتقل نمایید.\n</Notice>\n\n## تعیین نسخه‌ی Python در فینگ\n\nبرای اینکه برنامه شما بتواند  **build** شده و با موفقیت  بر روی **سکوی ابری فینگ**  مستقر شود، باید نسخه‌ی آن را مشخص نمایید. برای این منظور می‌توانید از روش زیر اقدام کنید:\n\n### استفاده از فایل fing.yaml\n\nبرای تعیین نسخه‌ی **python** برنامه‌تان می‌توانید از فایل `fing.yaml` استفاده نمایید. به اینصورت که در فایل مورد نظر عنوان `build` را وارد کرده و نسخه‌ی آن را مشخص کنید:\n\n```yaml\n# fing.yaml\n...\nbuild:\n  python_version: 3.8\n```\n\nبا استفاده از این روش، فینگ مراحل **استقرار** برنامه شما را با این نسخه‌ی تعیین شده از **python** آغاز خواهد کرد.\n\n### استفاده از نسخه‌ی پیش‌فرض\n\nاگر نسخه‌ی مورد نظر خود را مشخص نکرده باشید، **فینگ** از نسخه‌ی پیش فرض **python** `3.8` برای **ساخت** و **استقرار** برنامه‌ی شما استفاده خواهد کرد.\n\n## روند ساخت یک برنامه python\n\nبرای ساخت و راه‌اندازی برنامه‌ی  **python** ابتدا **فینگ**  وابستگی‌‌های برنامه را نصب کرده و سپس مراحل build برنامه را آغاز کرده و با توجه به دستور اجرایی که در برنامه مشخص شده است، یک برنامه پایتون را اجرا می‌کند. \n\n### نصب کتابخانه‌ها\nبرای اینکه کتابخانه‌‌های برنامه **پایتون**  به درستی نصب شوند، باید  فایلی با نام `requirements.txt`  در ریشه اصلی پروژه وجود داشته باشد. **فینگ** با مراجعه به آن فایل اقدام به نصب کتابخانه‌های مدنظر می‌کند.\n\n### دستور اجرای برنامه\n\nبرای اجرای موفق برنامه‌ی **پایتون** باید دستور اجرای آن مشخص شده باشد. برای این منظور **فینگ** به روش زیر اقدام به اجرای برنامه خواهد کرد:\n\n#### با استفاده از Procfile\n\nدر ریشه اصلی پروژه خود فایلی با نام `Procfile` ایجاد کنید و دستورات برنامه‌ی خود را داخل آن قرار دهید. **فینگ** بر اساس همان دستور برنامه شما را جهت استقرار آماده سازی می‌کند.\n\n```Procfile\nweb: python3 main.py\n```"},{"name":"react","title":"React","description":"چگونه برنامه react خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/react","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های react\" icon=\"react/react-original.svg\" />\n</Platform>\n\n# استقرار برنامه‌ React در فینگ\n\nشما می‌توانید برنامه‌هایی که با **react** ساخته‌اید را بر روی سکوی ابری فینگ مستقر کنید.\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nدر صورت لاگین نبودن، با وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **react** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **react** بوده و عملیات استقرار را آغاز می‌کند.\n- شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up react-app --platform=react\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **react** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"react-app\"\nport: 80\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  node-app\n> react-app\n  static-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://react-app.onfing.ir`\n"},{"name":"static","title":"Static","description":"چگونه برنامه Static خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/static","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Static\" src=\"https://fing.ir/images/platforms/static.svg\"/>\n</Platform>\n\n# استقرار برنامه‌های Static در فینگ\n\nشما می‌توانید برنامه‌های Static(ایستا) خود را بر روی سکوی ابری فینگ مستقر کنید. برنامه‌هایی که به وسیله‌ی **HTML** یا **CSS** یا **Javascript** ساخته شده باشند استاتیک هستند.\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nدر صورت لاگین نبودن، با وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **static** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **static** بوده و عملیات استقرار را آغاز می‌کند.\n- همچنین شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up static-app --platform=static\n```\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **static** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"static-app\"\nport: 80\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n  react-app\n  node-app\n> static-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://static-app.onfing.ir`\n"},{"name":"vite","title":"Vite","description":"چگونه می‌توانیم برنامه‌های (Vitejs) را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/vite","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Vite\" src=\"https://fing.ir/images/platforms/vite.svg\" />\n</Platform>\n\n# استقرار برنامه Vite در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nبا وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **vite** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **vite** بوده و عملیات استقرار را آغاز می‌کند.\n- همچنین شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up vite-app --platform=vite\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **vite** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"vite-app\"\nport: 80\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n> vite-app\n  react-app\n  angular-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://vite-app.onfing.ir`\n"},{"name":"vue","title":"Vue","description":"چگونه می‌توانیم برنامه‌های (VueJs) را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/platform/vue","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Vue\" icon=\"vuejs/vuejs-original.svg\"/>\n</Platform>\n\n# استقرار برنامه Vue در فینگ\n\n## نصب cli\n\nحتما قبل از شروع استقرار برنامه‌ی خود بر روی سکوی ابری ** فینگ** ، از نصب بودن [فینگ CLI](/quickstart/installation) مطمئن شوید.\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## ورود با cli\n\nبا وارد کردن دستور زیر، **ایمیل** و **رمز عبور** حساب کاربری خود در فینگ را وارد نمایید.\n\n```bash\n$ fing login\n```\n\n## مراحل استقرار\n\n### گام اول: ایجاد برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی گزینه **ساخت برنامه جدید** کلیک کرده و گزینه ** پلتفرم** را انتخاب کنید. سپس نام برنامه مورد نظر خود را وارد کرده و پلتفرم خود را **vue** قرار دهید و همچنین پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا برنامه شما ساخته شود.\n\n### گام دوم: دستور استقرار\n\nدر مسیر اصلی پروژه‌ی خود، دستور زیر را وارد کنید تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n- با اجرای دستور `fing up` فینگ ‌CLI به صورت خودکار تشخیص می‌دهد که برنامه شما **vue** بوده و عملیات استقرار را آغاز می‌کند.\n- همچنین شما می‌توانید موقع اجرای دستور بالا، نام برنامه و پلتفرم آن را نیز وارد کنید.\n\n```bash\n$ fing up vue-app --platform=vue\n```\n\n- با دیپلوی کردن برنامه‌ی خود، فینگ تمام پکیج‌های استفاده شده در فایل `package.json` برنامه‌تان را در سریع‌ترین زمان ممکن نصب کرده و برنامه‌ی شما را بصورت خودکار **build** می‌کند. بعد از انجام این مراحل، برنامه‌ی شما بصورت خودکار در سکوی ابری فینگ مستقر می‌گردد.\n\n### گام سوم: فایل fing.yaml\n\nبرای اینکه لازم نباشد در هر استقرار نام **برنامه** خود را مشخص کنید، می‌توانید در ریشه اصلی برنامه‌ی خود فایلی با نام `fing.yaml` بسازید و داخل آن نام برنامه را مشخص کنید. و اگر از پورتی غیر از پورت پیش‌ فرض **vue** استفاده می‌کنید که برنامه‌ی شما بر روی‌ آن `listen` می‌کند (اصطلاحا گوش می‌کند) را نیز حتما وارد کنید.\n\n```yaml\napp: \"vue-app\"\nport: 80\n```\n\n- چنانچه نام برنامه خود را مشخص نکرده باشید، با اجرای دستور `fing up` ، **فینگ CLI** نام برنامه‌هایی که در فینگ ساخته‌اید را لیست می‌کند و شما باید برنامه مورد نظر خود را انتخاب نمایید.\n\n```bash\n$  fing up\n? Choose your app  [Use arrows to move, type to filter]\n> vue-app\n  react-app\n  node-app\n```\n\n### گام آخر: مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی شما زیر دامنه‌ای اختصاص می‌دهد که می‌توانید از طریق آن از صحت استقرار برنامه در سرویس **فینگ** مطمئن شوید.\n\nزیر دامنه‌ی شما به این صورت خواهد بود: `https://vue-app.onfing.ir`\n"},{"name":"create-app","title":"ایجاد برنامه","dependencies":"نحوه‌ی ساخت برنامه بر روی سکوی ابری فینگ","href":"/quickstart/create-app","content":"\nimport { Notice } from \"components/Notice\"\n\n# ایجاد برنامه در فینگ\n\nبرای اینکه بتوانید **سورس کد** خود را بر روی **سکوی ابری فینگ** مسقر کنید، باید با یکی از روش‌های زیر یک برنامه ایجاد کنید:\n\n## از طریق فینگ‌ CLI\n\nبرای این منظور حتما از [نصب](/quickstart/installation) بودن فینگ ‌CLI بر روی ترمینال خود اطمینان حاصل کنید.\n\n### ایجاد برنامه\n\nبا استفاده از دستور `fing app create [appname]` و نام برنامه دلخواه خود، لیست پلن‌های موجود برای شما نمایش داده می‌شود که شما می‌توانید از طریق دکمه فلش کیبورد خود، **پلن**‌ مناسب برنامه‌ی خود را انتخاب نمایید تا برنامه شما با موفقیت ایجاد شود.\n\n```bash\n$ fing app create myapp\n? select plan  [Use arrows to move, type to filter]\n> [ nano ]\tMemory: 0.5G\tCPU: 0.25\tStorage: 5.0G\tPrice: 40,000 Tomans\n  [ micro ]\tMemory: 1.0G\tCPU: 0.50\tStorage: 10.0G\tPrice: 80,000 Tomans\n ...\n\n```\n\n## از طریق داشبورد\n\n### گام اول: ایجاد برنامه\n- از قسمت ‌[داشبورد](https://cloud.fing.ir) بر روی دکمه‌ی** ساخت برنامه جدید** کلیک کنید. \n\n![create app](/images/create-app.jpg)\n\n- سپس نوع پروژه‌ی خود را انتخاب نمایید.\n\n![choose app](/images/choose-app.jpg)\n\n- بعداز آن، نام برنامه و فریمورکی که از آن استفاده می‌کنید را انتخاب نمایید.\n\n![choose app name](/images/choose-app-name.jpg)\n\n- پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه ** ایجاد برنامه** کلیک کنید.\n\n![choose app plan](/images/choose-plan.jpg)\n\n### گام دوم: ایجاد فایل fing.yaml\n\nدر ریشه اصلی پروژه خود، فایلی را با نام `fing.yaml` بسازید و اطلاعات پایه ای برنامه خود را در آن قرار دهید. که می‌توانید نام برنامه، پلتفرمی که از آن استفاده می‌کنید و همچنین پورتی که برنامه شما روی آن `listen` می‌کند را مشخص کنید.\n\n```yaml\napp: myapp\nplatform: node\nport: 3000\n```\n\n<Notice variant=\"info\">\n  فینگ این قابلیت را دارد که پلتفرم و پورت برنامه شما را بصورت خودکار تشخیص دهد.\n  بنابر این اگر در فایل <strong>fing.yaml</strong> فقط نام برنامه‌ی خود را ذکر کنید، باز هم\n  برنامه شما به درستی مستقر خواهد شد.\n</Notice>\n\n### گام سوم: دیپلوی کردن\n\nوارد ریشه اصلی برنامه خود شوید و دستور `fing deploy` و یا `fing up` را وارد کنید تا اولین استقرار شما انجام گیرد.\n\n```bash\n$ fing up\n```\n\n<Notice variant=\"info\">\n  <strong>نکته</strong>: اگر در فایل yaml نام برنامه‌ی خود را مشخص نکرده باشید،\n  موقع اجرای دستور، فینگ CLI برنامه‌هایی که در فینگ ساخته اید را لیست می‌کند و\n  شما باید برنامه‌ای که می‌خواهید بر روی آن استقرار انجام شود را انتخاب کنید.\n</Notice>\n\n```bash\n$ fing up ? Choose your app [استفاده از فلش کیبورد برای جابجایی بین برنامه‌ها]\n> myapp\ndashboard\n...\n```\n\n<Notice variant=\"info\">\n  اگر بعد از اولین استقرار، تغییراتی در برنامه‌ی خود داشته باشید و بخواهید آنها\n  را دیپلوی کنید، <strong>فینگ CLI</strong> بصورت هوشمند فقط فایل‌هایی که تغییر\n  کرده و یا به پروژه اضافه شده‌اند را آپلود می‌کند و سایر فایل‌ها را از سرور\n  می‌خواند.\n</Notice>\n\n### گام چهارم: مشاهده خروجی\n\nبعد از اولین استقرار یک زیردامنه به برنامه‌ی شما تعلق می‌گیرد که می‌توانید از طریق آن از صحت استقرار برنامه‌ی خود در سرویس** فینگ ** اطمینان حاصل کنید. و این لینک بر اساس نام برنامه‌ی شما خواهد بود.\n\nبه عنوان نمونه\n`https://myapp.onfing.ir`\n"},{"name":"golang","title":"Golang","description":"چگونه برنامه Golang خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/quickstart/golang","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Golang\" icon=\"go/go-original.svg\" />\n</Platform>\n\n# ساخت، استقرار و اجرای یک برنامه Go\n\nدر این راهنما نحوه‌ی اجرای یک برنامه **Go** را در **فینگ** یاد خواهیم گرفت.\n\n## برنامه helloworld\n\nبرای ایجاد یک برنامه **go**، ابتدا فایلی با نام `main.go` ایجاد کرده و کد خود را داخل آن قرار می‌دهیم.\n\n```go\n// main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/hello\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello from Fing!\")\n\t})\n\n\tfmt.Println(\"Starting server at port:\", 8080)\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n### اجرای برنامه\n\nبرای شروع برنامه، دستور `go run main.go` را اجرا می‌کنیم.\n\n```bash\n$ go run main.go\n\nStarting server at port: 8080\n```\n\nاکنون `localhost:3000/hello` را در مرورگر خود باز کرده تا مطمئن شویم برنامه **golang** ما کار می‌کند.\n\n- بعداز اجرای موفقیت آمیز برنامه، اکنون می‌توانیم آن را جهت استقرار بر روی **سرویس ابری فینگ** آماده کنیم.\n\n## استقرار برنامه go در فینگ\n\nبرای استقرار برنامه‌ی خود بر روی سکوی ابری فینگ، باید یک برنامه را ایجاد کنید. برای اطلاع از چگونگی ایجاد آن، به بخش [ساخت برنامه در فینگ](/quickstart/create-app) مراجعه کنید.\n\n### ایجاد فایل fing.yaml\n\nدر ریشه اصلی پروژه خود، فایلی را با نام `fing.yaml` ایجاد می‌کنیم و اطلاعات پایه‌ای برنامه‌ی خود را در آن قرار می‌دهیم. که می‌توان نام برنامه، پلتفرمی که از آن استفاده می‌کنیم و همچنین پورتی که برنامه‌ی ما بر روی آن `listen` می‌کند را مشخص کنیم.\n\n```yaml\n# fing.yaml\napp: \"helloworld\"\nplatform: \"go\"\nport: 8080\n```\n\n### نصب فینگ cli و لاگین در آن\n\nبرنامه‌ی **golang** ما آماده‌ی استقرار بر روی **سکوی ابری فینگ** می‌باشد و این بدین معناست که ما برای مدیریت برنامه‌های خود به **فینگ cli** نیاز داریم. اگر هنوز آن را نصب نکرده‌اید به [راهنمای نصب](/quickstart/installation) ما بروید و بعد از نصب، در آن [لاگین](/quickstart/login) کنید.\n\n### دستور استقرار\n\nبعد از وارد شدن در فینگ cli در مسیر اصلی پروژه‌ی خود، دستور زیر را وارد می‌کنیم تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n### مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی ما زیر دامنه‌ای اختصاص می‌دهد که می‌توانیم از طریق آن از صحت استقرار برنامه خود در سرویس **فینگ** مطمئن شویم.\n\nزیر دامنه‌ی ما به این صورت خواهد بود: `https://helloworld.onfing.ir`\n"},{"name":"installation","title":"نصب CLI","description":"آموزش نصب دستور فینگ (CLI)","href":"/quickstart/installation","content":"\n# نصب CLI\n\n** فینگ CLI ** با ارائه مجموعه‌ای از دستورات، این امکان را به شما می‌دهد که برنامه‌های خود را مستقر و مدیریت کنید.\n\nبرای دانلود و نصب ** فینگ CLI ** دستور زیر را در ترمینال خود وارد کنید\n<!-- \n## نصب بر روی Mac و Linux\n\n```bash\n$ curl -fsSL https://fing.ir/install.sh | sh\n```\n\n## نصب بر روی Windows\n\n```bash\n$ iwr https://fing.ir/install.ps1 -useb | iex\n``` -->\n\n## نصب از طریق پکیج npm\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n## نصب از طریق پکیج yarn\n\n```bash\n$ yarn global add @fingcloud/cli\n```\n\n## چگونه فینگ CLI را به روزرسانی کنیم؟\n\nزمانی که نسخه‌ی جدیدی از ** فینگ CLI ** در دسترس باشد، موقع اجرای `fing` پیامی در خروجی ترمینال خود مشاهده خواهید کرد که به شما اطلاع می‌دهد نسخه‌ی جدیدتری از فینگ CLI وجود دارد.\n\n### به روزرسانی از طریق پکیج npm\n\nاگر ** فینگ CLI** را از طریق پکیج [npm](https://npmjs.com/) نصب کرده‌اید، ساده ترین روش برای به روزرسانی آن، اجرای مجدد دستور نصب می‌باشد:\n\n```bash\n$ npm i -g @fingcloud/cli\n```\n\n### به روزرسانی از طریق پکیج yarn\n\nاگر ** فینگ CLI** را از طریق پکیج [yarn](https://yarnpkg.com) نصب کرده‌اید، ساده‌ترین روش برای به روزرسانی آن، اجرای مجدد دستور نصب می‌باشد:\n\n```bash\n$ yarn global add @fingcloud/cli\n```\n"},{"name":"login","title":"لاگین","description":"نحوه‌ی لاگین کردن در فینگ CLI","href":"/quickstart/login","content":"\n# لاگین در فینگ\n\nاگر **فینگ CLI** را هنوز نصب نکرده‌اید، برای اجرای برنامه‌های خود بر روی **سکوی ابری فینگ** به آن نیاز دارید. جزئیات در مورد نحوه‌ی انجام این کار در [نصب فینگ](/quickstart/installation) موجود است.\n\n## حساب فینگ دارید؟\n\nاگر از قبل یک حساب کاربری در **فینگ** دارید با اجرای دستور زیر می‌توانید به **فینگ CLI** وارد شوید.\n\n```bash\n$ fing auth login -u [email]  -p [password]\nSuccessfully logged in.\n```\n\n### دستور fing auth\n\nفینگ این امکان را به شما می‌دهد که با استفاده از دستور `fing auth` بتوانید لیست اکانت‌ها، ورود و خروج از حساب و همچنین بین اکانت‌‌های خود سوئیچ شوید.\n\n#### use\n\nبا استفاده از دستور `fing auth use` امکان سوئیچ شدن بین اکانت‌‌های لاگین شده‌ی شما فراهم می‌شود.\n\n```bash\n$ fing auth use\n? select account  [Use arrows to move, type to filter]\n> example@gmail.com\n  my.emailname@gmail.com\n\n```\n\n#### list\n\nبا دستور `fing auth ls` اکانت‌‌هایی که در **فینگ CLI** لاگین کرده‌اید را می‌توانید مشاهده کرده و از فعال بودن هر یک اطلاع پیدا کنید.\n\n```bash\n$ fing auth ls\nEMAIL                        STATUS    LOGIN AT              LAST USED AT\nexample@gmail.com            -         -                     about 1 hour ago\nmy.emailname@gmail.com   ACTIVE    about 3 minutes ago   less than a minute ago\n\n```\n\n#### logout\n\nبا اجرای دستور `fing auth logout` از حساب لاگین شده خود در **فینگ‌ CLI** خارج خواهید شد.\n\n```bash\n$ fing auth logout\nLogged out my.emailname@gmail.com\n```\n\n### لاگین با browser\n\nبا کمک دستور `fing login --browser` می‌توانید بدونه وارد کردن **ایمیل** و **رمز عبور** خود در **فینگ ‌CLI** لاگین کنید.\n\n```bash\n$  fing login --browser\n✓ Session OK\n⣻ Getting Authentication\n```\n\nبا وارد کردن دستور بالا صفحه‌ای در مرورگر شما باز می‌شود و از شما خواسته می‌شود که حساب کاربری خود را انتخاب نمایید.\n\n![choose account](/images/cli-browser-choose-account.jpg)\n\nبعداز انتخاب اکانت مورد نظر، به صفحه‌ای هدایت می‌شوید که با کلیک کردن بر روی گزینه‌ی **به cli دسترسی بده** به فینگ CLI اجازه بدهید تا به حساب کاربری شما دسترسی داشته باشد.\n\n![choose account](/images/cli-browser-access.jpg)\n\nبعداز انتخاب این گزینه، اکانت شما با موفقیت در **فینگ‌ CLI** لاگین می‌شود.\n\n```bash\n$ fing login --browser\n✓ Session OK\n✓ Authentication OK\nSuccessfully logged in.\nSession saved\n```\n\n## حساب فینگ ندارید؟\n\nاگر هنوز حساب کاربری در فینگ ندارید، وارد صحفه‌ی [ثبت نام در فینگ](https://cloud.fing.ir/register) شوید.\n\n- **ثبت نام با ایمیل:** ایمیل، رمزعبور و شماره تلفن خود را وارد کنید.\n- **ثبت نام با Github:** اگر حساب گیت‌هاب دارید، می‌توانید از آن برای ثبت نام استفاده کنید.\n- **ثبت نام با Gmail:** اگر حساب جمیل دارید، می‌توانید از آن برای ثبت نام در فینگ استفاده کنید.\n\nدر صورت ثبت نام با **گیت‌هاب** یا **جمیل**، به دنبال ایمیل تأییدی باشید که برای شما ارسال می‌کنیم تا از طریق آن برای خود رمز عبور تعیین نمایید.\n"},{"name":"node","title":"NodeJS","description":"چگونه برنامه Node خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/quickstart/node","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های ‌‌NodeJs\" icon=\"nodejs/nodejs-original.svg\" />\n</Platform>\n\n# ساخت، استقرار و اجرای یک برنامه Node\n\nدر این راهنما نحوه‌ی اجرای یک برنامه **Node** را در **فینگ** یاد خواهیم گرفت.\n\n## برنامه helloworld\n\nبرای ایجاد یک برنامه **node** ابتدا باید دستور `npm init` و یا `yarn init` را اجرا کرده تا تنظیمات اولیه‌ی نود را داشته باشیم.\n\n```javascript\n// package.json\n{\n  \"name\": \"helloworld\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n```\n\nسپس فایلی با نام `index.js` ایجاد می‌کنیم تا کد خود را داخل آن قرار دهیم و بعد از آن دستور `npm install express --save` را اجرا می‌کنیم تا پکیج مورد نظر نصب شود.\n\n```javascript\n// index.js\nconst express = require(\"express\");\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.get([\"/\", \"/:name\"], (req, res) => {\n  greeting = \"<h1>Hello From Node on Fing!</h1>\";\n  name = req.params[\"name\"];\n  if (name) {\n    res.send(greeting + \"</br>and hello to \" + name);\n  } else {\n    res.send(greeting);\n  }\n});\n\napp.listen(port, () =>\n  console.log(`HelloWorld app listening on port ${port}!`)\n);\n```\n\n### اجرای برنامه\n\nبرای شروع برنامه، دستور `node index.js` را اجرا می‌کنیم.\n\n```bash\n$ node index.js\n\nHelloWorld app listening on port 3000!\n```\n\nاکنون `localhost:3000` را در مرورگر خود باز کرده تا مطمئن شویم برنامه **node** ما کار می‌کند.\n\n- بعداز اجرای موفقیت آمیز برنامه، اکنون می‌توانیم آن را جهت استقرار بر روی **سرویس ابری فینگ** آماده کنیم.\n\n## استقرار برنامه node در فینگ\n\nبرای استقرار برنامه‌ی خود بر روی سکوی ابری فینگ، باید یک برنامه را ایجاد کنید. برای اطلاع از چگونگی ایجاد آن، به بخش [ساخت برنامه در فینگ](/quickstart/create-app) مراجعه کنید.\n\n### ایجاد فایل fing.yaml\n\nدر ریشه اصلی پروژه خود، فایلی را با نام `fing.yaml` ایجاد می‌کنیم و اطلاعات پایه‌ای برنامه‌ی خود را در آن قرار می‌دهیم. که می‌توان نام برنامه، پلتفرمی که از آن استفاده می‌کنیم و همچنین پورتی که برنامه‌ی ما بر روی آن `listen` می‌کند را مشخص کنیم.\n\n```yaml\n# fing.yaml\napp: \"helloworld\"\nplatform: \"node\"\nport: 3000\n```\n\n### نصب فینگ cli و لاگین در آن\n\nبرنامه‌ی **node** ما آماده‌ی استقرار بر روی **سکوی ابری فینگ** می‌باشد و این بدین معناست که ما برای مدیریت برنامه‌های خود به **فینگ cli** نیاز داریم. اگر هنوز آن را نصب نکرده‌اید به [راهنمای نصب](/quickstart/installation) ما بروید و بعد از نصب، در آن [لاگین](/quickstart/login) کنید.\n\n### دستور استقرار\n\nبعد از وارد شدن در فینگ cli در مسیر اصلی پروژه‌ی خود، دستور زیر را وارد می‌کنیم تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n### مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی ما زیر دامنه‌ای اختصاص می‌دهد که می‌توانیم از طریق آن از صحت استقرار برنامه خود در سرویس **فینگ** مطمئن شویم.\n\nزیر دامنه‌ی ما به این صورت خواهد بود: `https://helloworld.onfing.ir`\n"},{"name":"python","title":"Python","description":"چگونه برنامه Python خود را بر روی سکوی ابری فینگ مستقر(deploy) کنیم؟","href":"/quickstart/python","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه‌های Python\" icon=\"python/python-original.svg\" />\n</Platform>\n\n# ساخت، استقرار و اجرای یک برنامه Python\n\nدر این راهنما نحوه‌ی اجرای یک برنامه **Python** به کمک پلتفرم **flask** را در **فینگ** یاد خواهیم گرفت.\n\n## برنامه helloworld\n\nبرای ایجاد یک برنامه **python**، فایلی با نام `server.py` ایجاد می‌کنیم و سپس کد خود را در آن قرار می‌دهیم.\n\n```py\n# server.py\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\n@app.route('/<name>')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n```\n\n**Flask** برای مسیریابی درخواست به یک تابع `hello` تنظیم شده است که به نوبه خود یک مقدار نام (برگرفته از مسیر درخواست ها) را به یک تابع برای ارائه یک الگو ارسال می کند. این الگو در پوشه‌ی `templates` با نام `hello.html` قرار دارد.\n\n```html\n<!-- hello.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head> </head>\n  <body>\n    <h1>Hello from Fing</h1>\n    {% if name %}\n    <h2>and hello to {{name}}</h2>\n    {% endif %}\n  </body>\n</html>\n```\n\n- شما باید خود **Flask** را نصب کنید یا حداقل محیط‌های مجازی را همانطور که در [راهنمای نصب فلاسک](https://flask.palletsprojects.com/en/1.1.x/installation/#virtual-environments) توصیه شده است راه‌اندازی کنید.\n\nهنگامی که محیط مجازی را فعال شد، دستور زیر را اجرا می‌کنیم:\n\n```bash\n$ python -m pip install -r requirements.txt\n```\n\nبا اجرای این دستور، فلاسک و سایر پکیج‌های مورد نیاز بارگیری می‌شوند.\n\n### اجرای برنامه\n\nبرنامه‌های **Flask** با دستور `flask run` اجرا می شوند، اما قبل از انجام این کار، باید یک متغیر محیطی `FLASK_APP` تنظیم کنیم تا بگوییم کدام برنامه را می خواهیم اجرا کنیم.\n\n```bash\n$ export FLASK_APP=server\n$ flask run\n* Serving Flask app 'server' (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)\n```\n\nاین دستور، برنامه `server` ما را اجرا می‌کند. که می‌توانیم در مرورگر خود به `http://localhost:5000` متصل شویم.\n\n- بعداز اجرای موفقیت آمیز برنامه، اکنون می‌توانیم آن را جهت استقرار بر روی **سرویس ابری فینگ** آماده کنیم.\n\n## استقرار برنامه python در فینگ\n\nبرای استقرار برنامه‌ی خود بر روی سکوی ابری فینگ، باید یک برنامه را ایجاد کنید. برای اطلاع از چگونگی ایجاد آن، به بخش [ساخت برنامه در فینگ](/quickstart/create-app) مراجعه کنید.\n\n### ایجاد فایل fing.yaml\n\nدر ریشه اصلی پروژه خود، فایلی را با نام `fing.yaml` ایجاد می‌کنیم و اطلاعات پایه‌ای برنامه‌ی خود را در آن قرار می‌دهیم. که می‌توان نام برنامه، پلتفرمی که از آن استفاده می‌کنیم و همچنین پورتی که برنامه‌ی ما بر روی آن `listen` می‌کند را مشخص کنیم.\n\n```yaml\n# fing.yaml\napp: \"helloworld\"\nplatform: \"falsk\"\nport: 3000\n```\n\n### نصب فینگ cli و لاگین در آن\n\nبرنامه‌ی **falsk** ما آماده‌ی استقرار بر روی **سکوی ابری فینگ** می‌باشد و این بدین معناست که ما برای مدیریت برنامه‌های خود به **فینگ cli** نیاز داریم. اگر هنوز آن را نصب نکرده‌اید به [راهنمای نصب](/quickstart/installation) ما بروید و بعد از نصب، در آن [لاگین](/quickstart/login) کنید.\n\n### دستور استقرار\n\nبعد از وارد شدن در فینگ cli در مسیر اصلی پروژه‌ی خود، دستور زیر را وارد می‌کنیم تا اولین استقرار انجام شود.\n\n```bash\n$ fing up\n```\n\n### مشاهده خروجی\n\nبعد از انجام مراحل قبلی و اولین استقرار، فینگ برای برنامه‌ی ما زیر دامنه‌ای اختصاص می‌دهد که می‌توانیم از طریق آن از صحت استقرار برنامه خود در سرویس **فینگ** مطمئن شویم.\n\nزیر دامنه‌ی ما به این صورت خواهد بود: `https://helloworld.onfing.ir`\n"},{"name":"commands","title":"دستورات","description":"لیست دستورات فینگ CLI و نحوه اجرای آنها","href":"/references/commands","content":"\nimport { Notice } from \"components/Notice\";\n\n# دستورات\n\nدر این مستند شما با دستورهای موجود در **فینگ CLI** آشنا خواهید شد.\n## مدیریت حساب کاربری\n\n**فینگ CLI** این امکان را به شما می‌دهد که بتوانید با دستورات مختلف حساب کاربری خود را مدیریت کنید.\nهمچنین دستور `auth` امکان **لیست** حساب‌ها، **ورود-خروج** از حساب و **سوئیچ**  بین حساب‌ها را برای شما فراهم می‌کند که توضیحات آن در ادامه خواهد آمد.\n### لاگین با مرورگر\n\nبا کمک دستور `fing login --browser` می‌توانید بدونه وارد کردن **ایمیل** و **رمز عبور** خود در **فینگ ‌CLI** لاگین کنید.\n\n```bash\n$  fing login --browser\n✓ Session OK\n⣻ Getting Authentication\n```\n\nبا وارد کردن دستور بالا صفحه‌ای در مرورگر شما باز می‌شود و از شما خواسته می‌شود که حساب کاربری خود را انتخاب نمایید.\n\n![choose account](/images/cli-browser-choose-account.jpg)\n\nبعداز انتخاب حساب مورد نظر، به صفحه‌ای هدایت می‌شوید که با کلیک کردن بر روی گزینه‌ی **به cli دسترسی بده** به **فینگ CLI** اجازه بدهید تا به حساب کاربری شما دسترسی داشته باشد.\n\n![choose account](/images/cli-browser-access.jpg)\n\nبعداز انتخاب این گزینه، اکانت شما با موفقیت در **فینگ‌ CLI** لاگین می‌شود.\n\n```bash\n$ fing login --browser\n✓ Session OK\n✓ Authentication OK\nSuccessfully logged in.\nSession saved\n```\n\n### لاگین با خط فرمان\n\nبا وارد کردن دستور `fing auth login` این امکان را دارید که اکانت‌‌‌های ساخته شده خود در **سکوی ابری فینگ** را به **فینگ CLI** اضافه نمایید.\n\n```bash\n$ fing auth login -u [email]  -p [password]\nSuccessfully logged in.\n```\n\n- همچنین شما این امکان را دارید که بدون استفاده از دستور `auth`، و تنها با وارد کردن دستور `fing login` در **فینگ CLI** لاگین کنید.\n\n```bash\n$ fing login -u [email]  -p [password]\n```\n\nبا وارد کردن **ایمیل** و **رمز عبور** خود، وارد حساب کاربری‌تان شوید.\n\n### جابجایی در حساب‌ها\n\nبا استفاده از دستور `fing auth use` امکان سوئیچ شدن بین اکانت‌‌های لاگین شده‌ی شما فراهم می‌شود. که می‌توانید با فلش کیبورد سیستم خود، حساب مورد نظر را انتخاب کنید.\n\n```bash\n$ fing auth use\n? select account  [Use arrows to move, type to filter]\n> example@gmail.com\n  my.emailname@gmail.com\n```\n\n### لسیت حساب‌ها\n\nبا دستور `fing auth ls` اکانت‌‌هایی که در **فینگ CLI** لاگین کرده‌اید را می‌توانید مشاهده کرده و از فعال بودن هر یک اطلاع پیدا کنید.\n\n```bash\n$ fing auth ls\nEMAIL                        STATUS    LOGIN AT              LAST USED AT\nexample@gmail.com            -         -                     about 1 hour ago\nmy.emailname@gmail.com   ACTIVE    about 3 minutes ago   less than a minute ago\n```\n\n### خروج از حساب\n\nبا اجرای دستور `fing auth logout` از حساب لاگین شده خود در **فینگ‌ CLI** خارج خواهید شد.\n\n```bash\n$ fing auth logout\nLogged out my.emailname@gmail.com\n```\n\n## مدیریت برنامه‌ها\n\nبا استفاده از دستور `fing app [command]` این امکان برای شما فراهم می‌شود که بتوانید از طریق **فینگ‌ CLI** برنامه‌ی خود را **ایجاد**، **روشن**، **خاموش**، **حذف** و همچنین **لاگ‌های** آن را مشاهده کنید.\n\n### ساخت برنامه\n\nبا استفاده از دستور `fing app create [appname]` و نام برنامه دلخواه خود، لیست **پلن‌های**  موجود برای شما نمایش داده می‌شود که شما می‌توانید از طریق دکمه فلش کیبورد خود، **پلن**‌ مناسب برنامه‌ی خود را انتخاب نمایید تا برنامه شما با موفقیت ایجاد شود.\n\n```bash\n$ fing app create myapp\n? select plan  [Use arrows to move, type to filter]\n> [ nano ]\tMemory: 0.5G\tCPU: 0.25\tStorage: 5.0G\tPrice: 40,000 Tomans\n  [ micro ]\tMemory: 1.0G\tCPU: 0.50\tStorage: 10.0G\tPrice: 80,000 Tomans\n ...\n\n```\n\n### لیست برنامه‌ها\n\nبا اجرای دستور `fing app ls` می‌توانید لیست برنامه‌هایی که در **سکوی ابری فینگ** ایجاد کرده‌اید را مشاهده کنید.\n\n```bash\n$ fing app ls\nNAME             PLATFORM     STATUS      IMAGE                                     CREATED\napi-server       node         running     registry.fing.ir/api-server:3o7wi6f8      about 5 months ago\ndashboard        next         running     registry.fing.ir/dashboard:se0z2on6       about 4 months ago\nmy-db            package      stop                                                  about 2 months ago\n```\n\n### شروع برنامه\n\nبا وارد کردن دستور `fing app start [appname]`، برنامه شما استارت می‌شود.\n\n```bash\n$ fing app start myapp\n> app 'myapp' started\n\n```\n\n### خاموش کردن برنامه\n\nبا کمک دستور `fing app stop [appname]`، برنامه شما به وضعیت **stop** در خواهد آمد.\n\n```bash\n$ fing app stop myapp\n> app 'myapp' started\n```\n\n### شروع دوباره برنامه\n\nبا اجرای `fing app restart [appname]` برنامه‌ی مورد نظر شما دوباره استارت می‌شود.\n\n```bash\n$ fing app restart myapp\napp 'myapp' restartd\n```\n\n### حذف برنامه\n\nبا وارد کردن دستور `fing app remove [appname]` می‌توانید برنامه خود را از طریق **فینگ CLI** حذف نمایید.\n\n```bash\n$ fing app remove myapp\n? Enter app name to remove (myapp): myapp\napp 'myapp' removed\n```\n\n### لاگ‌های برنامه\n\nدستور `fing app logs [appname]` این امکان را به شما می‌دهد که لاگ‌های برنامه‌ی خود را بصورت زنده در ترمینال‌تان مشاهده کنید.\n\n```bash\n$ fing logs app myapp [flags]\n```\n\n#### آرگومان‌ها\n\n- **follow**\n\nگزینه `follow--` یا `f-` باعث می‌شود که ترمینال شما بسته نشده و لاگ‌ها بصورت مستمر نمایش داده شود.\n\n```bash\n$ fing app logs [myapp] --follow\n```\n\n- **since**\n\nبا اضافه کردن گزینه `since--` می‌توانید زمان لاگ‌ها را مشخص کنید. به عنوان مثال اگر بخواهید لاگ‌های یک ساعت قبل را مشاهد کنید باید زمان آن را بصورت دقیقه یا ساعت‌ وارد کنید.\n\n```bash\n$ fing app logs [myapp] --since [1h or 60m]\n```\n\n- **timestamps**\n\nاستفاده از گزینه `timestamps--` این امکان را می‌دهد که شما زمان و تاریخ دقیق لاگ‌های برنامه‌ی خود را مشاهده کنید.\n\n```bash\n$ fing app logs [myapp] --timestamps\n```\n\n## مدیریت استقرار برنامه‌ها\n\nاز دستور `fing up` برای استقرار برنامه‌ها استفاده می‌شود. برای اجرای آن یا باید در مسیر فعلی پروژه باشید و یا مسیر پروژه مورد نظر را به آن ارائه دهید.\n\n### استفاده پایه‌ای\n\nاجرای دستور `fing up` در مسیر فعلی پروژه:\n\n```bash\n$ fing up\n```\n\n### استفاده طولانی‌تر\n\nاجرای دستور `fing up` با اضافه کردن مسیر پروژه:\n\n```bash\n$ fing up --path [path/to/project]\n```\n\n### انتخاب پلتفرم\n\nهنگام ایجاد یک برنامه جدید، **فینگ CLI** به طور خودکار پلتفرمی ‌که از آن استفاده می‌کنید را شناسایی می‌کند و بر این اساس تنظیمات پیش فرض برنامه را ارائه می‌دهد. به عنوان مثال اگر برنامه شما `NodeJs` باشد، **فینگ CLI**  به صورت خودکار آن را پلتفرم `node` تشخیص می‌دهد و عملیات استقرار را آغاز می‌کند. البته شما می‌توانید هنگام اجرای دستور `fing up` پلتفرم برنامه را هم مشخص کنید:\n\n```bash\n$ fing up --platform=node\n```\n\n<Notice variant=\"info\">\n  می‌توانید بعداً تنظیمات برنامه‌ی خود را از قسمت <a href=\"https://cloud.fing.ir\">داشبورد</a> ویرایش کنید.\n</Notice>\n\n## راهنمای دستورات\n\nدستور `fing help` تمامی دستورات و گزینه‌های **فینگ CLI**  موجود در ترمینال را لیست می‌کند. و اگر یک آرگومان دومی‌به آن اضافه شود، اطلاعات دقیق‌تری در مورد آن دستور ارائه می‌دهد.\n\n\n```bash\n$ fing help [command]\n```\n"},{"name":"deployments","title":"استقرارها","description":"استقرار، نتیجه ساخت برنامه شما و در دسترس قرار دادن آن از طریق یک URL مستقیم است.","href":"/references/deployments","content":"\n# استقرارها\n\nاستقرار، نتیجه ساخت برنامه شما و در دسترس قرار دادن آن از طریق یک URL مستقیم است.\n\nدر این بخش درباره ساخت ، مدیریت و درک عملکرد استقرارها صحبت خواهیم کرد .\n\n## ساخت استقرارها\n\nبرای اینکه بتوانید برنامه خود را در فینگ مستقر کنید، می‌توانید از [فینگ CLI](/references/deployments#فینگ-cli) استفاده کنید.\n\nهنگام استقرار ، [برنامه](/references/overview) بارگذاری شده و به یک خروجی آماده تولید تبدیل می‌شود.\n\nهنگامی که مرحله ساخت با موفقیت به پایان رسید ، استقرار جدید در [URL پیش نمایش](/references/deployments#پیش-نمایش) در دسترس خواهد بود و این استقرار قابل تغییر نیست. و برای تغییر آن نیاز به استقرار جدید می‌باشد.\n\n## فینگ CLI\n\nبا استفاده از [فینگ CLI](/quickstart/create-app)، می‌توانید [برنامه‌ها](/references/overview) را با یک دستور از ترمینال خود مستقر کنید.\n\nبرای ایجاد یک [پیش نمایش](/references/deployments#پیش-نمایش) از دستور `fing up` استفاده کنید.\n\n```bash\n$ fing up\n```\n\nاستقرار پیش نمایش با دستور `fing up`\n\n## پیش نمایش\n\nبطور پیش فرض در فینگ، همه استقرارها دارای یک ** پیش نمایش** هستند، وقتی که برای استقرار ** برنامه‌ی ** خود از دستور `fing up` استفاده می‌کنید، می‌توانید به صورت ** پیش نمایش ** استقرار را مشاهده کنید.\n\nبا ایجاد یک استقرار، ** URL پیش نمایش ** بروز می‌شود تا آخرین داده‌های مستقر شده قابل مشاهد باشند.\n\n## مدیریت استقرارها\n\nمی‌توانید استقرارهای خود را از طریق [داشبورد فینگ](https://cloud.fing.ir) یا در موارد استفاده پیشرفته، از طریق [فینگ CLI](/quickstart/installation) مدیریت کنید.\n\n### داشبورد\n\n[داشبورد فینگ](https://cloud.fing.ir) ساده ترین راه برای مدیریت استقرارهای شما می‌باشد.\n\nاز طریق داشبورد فینگ می‌توانید بخش‌های مختلفی را پیدا کنید. از جمله:\n\n- **نمای کلی:** از این بخش می‌توانید **مشخصات**، **وضعیت**، **میزان مصرف CPU و RAM** برنامه‌ای که ساخته‌اید را مشاهده کنید. همچنین می‌توانید از این قسمت برنامه‌ی خود را** ریستارت** ، ** خاموش** و یا ** روشن** کنید.\n- ** استقرارها:** می‌توانید از این صفحه لیست استقرارهای برنامه‌ی خود را مشاهده کنید.\n- **دامنه‌ها:** که می‌توانید [دامنه‌های سفارشی](/references/domains) را به برنامه‌ی خود اضافه کنید.\n- ** لاگ‌ها: ** که از این قسمت می‌توانید بصورت زنده در جریان لاگ‌های برنامه‌ی خود قرار بگیرید.\n- ** متغیرها: ** می‌توانید از این بخش [متغیرهای](/references/environment-variables) محیطی برنامه‌ی خود را تنظیم کنید.\n- **دیسک‌**: می‌توانید برای برنامه‌ی مد نظر خود دیسک‌های مختلف ایجاد کنید.\n- **تنظیمات: ** می توانید در این قسمت پلن فعلی خود را تغییر داده و یا تنظیمات مربوط به برنامه را انجام دهید \n\n### فینگ CLI\n\n[فینگ CLI](/quickstart/create-app) روش‌های جایگزینی برای مدیریت استقرار شما ارائه می‌دهد.\n\nهمچنین می‌توانید لیست کاملی از دستورات موجود را در [fing CLI](/references/commands) پیدا کنید.\n"},{"name":"disks","title":"دیسک‌ها","description":"آموزش ساخت و نحوه‌ی استفاده از دیسک در سکوی ابری فینگ","href":"/references/disks","content":"\n# دیسک‌ها\n\nدیسک‌ها مثل پوشه‌هایی هستند که فایل‌های شما در آن نگهداری می‌شود و شما می‌توانید آنها را به برنامه خود متصل کنید.\n\nفضای دیسک‌های هر برنامه، بستگی به مقدار فضای **storage** آن برنامه دارد. به عنوان مثال اگر فضای **‌storage** برنامه‌ی شما 5 گیگابایت باشد، فضای دیسک هم به همان میزان خواهد بود.\n\nاگر دیسک‌های شما به فضای بیشتری احتیاج دارند می توانید از قسمت **تنظیمات** همان برنامه پلن فعلی را ارتقاء دهید.\n\n## نحوه‌ی ایجاد دیسک در فینگ\n\n### گام اول: انتخاب برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir) برنامه‌ی مورد نظر را انتخاب کنید.\n\n### گام دوم: رفتن به صفحه دیسک\n\nبعد از انتخاب برنامه، وارد صفحه **دیسک** شوید و بر روی گزینه** افزودن دیسک** کلیک کرده و یک نام برای آن انتخاب کنید. در پایان دکمه **ایجاد** را فشار دهید تا دیسک ساخته شود.\n\n![create disk](/images/apps-create-disk.jpg)\n\n### گام سوم: فایل fing.yaml\n\nبرای استفاده از دیسک ساخته شده، فایل `fing.yaml` خود را باز کرده و نام دیسک و مسیر پوشه‌ای که می‌خواهید دیسک در آن **mount** شود را به آن اضافه کنید.\n\n```yaml\napp: \"server\"\nplatform: \"node\"\nport: 3000\ndisks:\n  - name: \"mydisk\"\n    mount_to: \"/mountPath\"\n```\n\n- در صورتی که برنامه‌ی شما دارای چند دیسک می‌باشد، به مانند مثال زیر وارد کنید:\n\n```yaml\n...\ndisks:\n  - name: \"mydisk1\"\n    mount_to: \"/mountPath\"\n  - name: \"mydisk2\"\n    mount_to: \"/mountPath\"\n  ...\n```\n\n### گام چهارم: دیپلوی برنامه\n\nبرای **mount** کردن دیسک ها، باید برنامه خود را دوباره مستقر کنید. برای این‌کار می‌توانید از ریشه برنامه‌تان دستور `fing up` را وارد کنید تا تغییرات صورت گرفته اعمال گردد.\n\n```bash\n$ fing up\n```\n\n## دسترسی FTP\n\nهر دیسکی که در **فینگ** ساخته می‌شود، یک دسترسی **FTP** برای آن تعلق می‌گیرد که می‌توانید آن را فعال کنید.\nبرای این‌کار بر روی گزینه **فعال کردن FTP** کلیک کنید.\n\n![activate ftp](/images/apps-disks-activate-ftp.jpg)\n\n- بعد از فعال کردن **FTP**، فینگ برای دیسک شما یک `user` ،`host` و `password` اختصاصی در نظر می‌گیرد که شما بتوانید در نرم‌افزارهای مدیریت ftp مثل [filezilla](https://filezilla-project.org) و یا [CyberDuck](https://cyberduck.io) از آنها استفاده کنید.\n\n![activate ftp](/images/apps-disks-activate-ftpfile.jpg)\n\n### مدیریت فایل‌های FTP در دیسک\n\nفینگ این امکان را به شما می‌دهد که بتوانید بدون نیاز به نرم‌افزارهای ftp، فایل‌‌ها و داده‌‌های دیسک خود را مدیریت کنید. برای این‌کار روی گزینه ** مدیریت فایل‌ها** کلیک کنید تا به صفحه‌ی جدیدی به نشانی `https://browse.fing.ir/files` منتقل شوید.\n![file management](/images/apps-disks-file-management.jpg)\n\n#### امکانات FTP دیسک\n\n##### آپلود به فایل FTP\n\nبعد از انتقال به صفحه مدیریت فایل‌های دیسک که **فینگ** در اختیار شما قرار داده، می‌توانید فایل‌ها و یا فولدرهای متعدد بسازید. برای آپلود کردن فایل‌ها هم می‌توانید بر روی علامت آپلود که در پایین صفحه وجود دارد کلیک کنید و فایل‌‌های مورد نظر را انتخاب کرده و کلید اینتر را فشار دهید و یا اینکه از قابلیت ** درگ** کردن استفاده کنید.\n\n##### دانلود از فایل FTP\n\nبرای دانلود هر فایل، بر روی آن کلیک کنید و دکمه دانلود را فشار دهید تا مراحل دانلود انجام گیرد.\n\n##### به اشتراک گذاشتن فایل‌‌ها در FTP\n\n###### اشتراک گذاری فولدر\n\nبرای به اشتراک گذاشتن فولدر، بر روی علامت اشتراکی که روی فولد قرار دارد کلیک کنید تا پنجره زیر برای شما نمایش داده شود.\n![browse share folder](/images/apps-disks-ftp-sharefolder.jpg)\nاز سه گزینه ‌**Uploader**، **Viewer**، **Editor** یکی را انتخاب کنید.\nبا انتخاب Uploader، Editor این امکان برای افرادی که لینک را در اختیار آنها قرار می‌دهید وجود دارد که در فولدر مورد نظر فایل و فولدر جدید ایجاد کنند و همچنین بتوانند فایل‌ها و داده‌‌ها را آپلود نمایند.\n\nاین امکان را دارید که با فعال کردن گزینه **Only for users** ایمیل افرادی که می‌خواهید لینک ایجاد شده در اختیار آنها قرار بگیرد را وارد کنید و همچنین با فعال کردن گزینه **Password** برای فایلی که به اشتراک می‌گذارید رمز عبور تعیین نمایید\n\nبعد از انتخاب گزینه‌‌های مورد نظر، پسورد و لینک ایجاد شده را کپی کرده و در اختیار هم تیمی‌های خود قرار دهید.\n\n###### اشتراک گذاری فایل\n\nبرای به اشتراک گذاشتن یک فایل، بر روی علامت اشتراک فایل مورد نظر کلیک کنید تا پنجره‌ای به شکل زیر برای شما نمایش داده شود.\n![browse share file](/images/apps-disks-ftp-sharefile.jpg)\nیکی از گزینه‌های **Editor** یا **Viewer** را انتخاب کنید. با کلیک کردن بر روی ** ادیتور** افرادی که لینک را در اختیار آنها قرار می‌دهید، می‌توانند فایل شما را ویرایش کنند. اما با انتخاب گزینه **بیننده** امکان ویرایش فایل برای افراد وجود ندارد. می‌توانید با فعال کردن گزینه **Only for users** ایمیل هم تیمی‌‌های خود را وارد کنید تا فقط آنها بتوانند به این فایل شما دسترسی داشته باشند. همچنین می‌توانید برای ورود به فایل پسورد تعیین نمایید.\n\nبعد از انجام این مراحل، پسورد و لینک ساخته شده در پایین صفحه را کپی کرده و به هم تیمی‌های خود ارائه دهید تا بتوانند فایل شما را ویرایش و یا مشاهده نمایند.\n\n##### لاگین\n\nشما این امکان را دارید با هر دستگاهی که به اینترنت متصل هست، فایل‌ها و داده‌های دیسک خود را مدیریت کنید. کافیست لینک `https://browse.fing.ir` را در دستگاه مورد نظر وارد کنید تا به صفحه **لاگین** منتقل شوید.\nبرای وارد شدن حتما اطلاعات هاست، یوزر، پسورد و پورتی که موقع فعال کردن FTP برای شما اختصاص داده شده است را به شکل زیر وارد کنید و بر روی گزینه **CONNECT** کلیک نمایید.\n![browse login](/images/apps-disks-ftp-login.jpg)\n"},{"name":"domains","title":"دامنه‌های سفارشی","description":"در این سند چگونگی اضافه کردن دامنه به پروژه‌های خود در سرویس ابری فینگ توضیح داده شده است","href":"/references/domains","content":"\nimport { Notice } from \"components/Notice\";\n\n# مدیریت دامنه‌ها\n\nبه طور پیش فرض بعد از اولین استقرار هر برنامه‌ در ** فینگ** ، یک زیر دامنه‌ی `onfing.ir` به آن اختصاص داده می‌شود. به عنوان مثال اگر برنامه شما به نام `myapp` ایجاد شده باشد، زیر دامنه‌ی شما `https://my-app.onfing.ir` خواهد بود که می‌توانید از طریق آن به برنامه‌ی خود دسترسی داشته باشید.\n\nشما می‌توانید این دامنه را با دامنه سفارشی خود جایگزین کنید.\n\nدر این سند چگونگی اضافه کردن ** دامنه** به پروژه‌های خود در** فینگ** توضیح داده شده است.\n\n## اضافه کردن دامنه\n\n### گام اول: انتخاب برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir)، برنامه‌ای که می‌خواهید ** دامنه‌ی** خود را به آن اختصاص دهید را انتخاب کنید.\n\n![choose app](/images/apps-choose.jpg)\n\n### گام دوم: رفتن به دامنه‌ها\n\nبعد از انتخاب برنامه مورد نظر، وارد صفحه‌ی** دامنه‌ها** شده و روی **افزودن دامنه** کلیک کنید.\n\n![choose domain](/images/apps-domains-choose.jpg)\n\n### گام سوم: انتخاب دامنه‌ی خود\n\nاز صفحه‌ی دامنه‌ها، دامنه‌ی که می‌خواهید به برنامه اضافه کنید را وارد نمایید و سپس روی دکمه ** ایجاد** کلیک کنید.\n\n![add domain](/images/apps-domains-add.jpg)\n\n### گام آخر: بررسی دامنه\n\nبعد از اضافه کردن دامنه، صفحه‌ی زیر برای شما نمایش داده خواهد شد. برای اینکه دامنه‌ی شما به برنامه‌تان متصل شود باید مقدار **CNAME** و **TXT** را کپی کرده و در **dns** برنامه‌تان تنظیم کنید. و بعد از آن بر روی دکمه **بررسی** کلیک کنید تا دامنه‌ی شما بررسی شود.\n\n\n![check domain](/images/apps-domains-check.jpg)\n\nبا سبز شدن تیک وضعیت، یعنی اتصال با موفقیت برقرار شده است.\n![status domain](/images/apps-domains-status.jpg)\n\n## دامنه‌ی امن\n\nبرای اینکه از دامنه‌ی امن (**HTTPS**) برخوردار شوید، بر روی گزینه ** فعال بودن https** کلیک کنید.\n![domains https](/images/apps-domains-https.jpg)\n\n## لیست دامنه‌ها\n\nشما می‌توانید در پایین صفحه، لیست دامنه‌هایی که به ** برنامه‌ی ** خود اختصاص داده‌اید را مشاهده کنید.\n\n![domains list](/images/apps-domains-list.jpg)\n"},{"name":"environment-variables","title":"متغیرها","description":"چگونه متغیرهای محیطی(ENV) را بر روی برنامه خود تنظیم کنیم؟","href":"/references/environment-variables","content":"\nimport { Notice } from \"components/Notice\";\n\n# متغیرها\n\nمتغیرها به صورت key-value می‌باشند که در خارج از سورس برنامه شما پیکربندی شده‌اند تا هر مقدار بسته به محیط تغییر کند.\n\nتغییرات متغیرها در استقرارهای قبلی اعمال نمی‌شوند، بلکه فقط در استقرارهای جدید اعمال می‌شوند.\n\n## اضافه کردن متغیر\n\n### گام اول: انتخاب برنامه\n\nاز قسمت [داشبورد](https://cloud.fing.ir)، برنامه‌ای که می‌خواهید متغیر‌های محلی برای آن تعریف کنید را انتخاب کنید.\n\n![choose app](/images/apps-choose.jpg)\n\n### گام دوم: رفتن به متغیرها\n\nبعد از انتخاب برنامه مورد نظر، گزینه‌ی ** متغیرها** را انتخاب کرده و بر روی دکمه ** متغیر جدید** کلیک کنید.\n\n![environment click button](/images/apps-e‌nvironments-click-button.jpg)\n\n### گام سوم: اضافه کردن متغییر محلی\n\nبر روی آیکون ** ویرایش‌** کلیک کنید تا به رنگ نارنجی تغییر کند.\nنام مورد نظر خود را در قسمت ** key** تعریف کرده و سپس، مقدار آن را در قسمت **value** وارد کنید. و در آخر آیکون نارنجی را فشار دهید تا تغییرات ایجاد شده ذخیره گردند.\n\n![create environment variable](/images/apps-e‌nvironments-create-env.jpg)\n\n<Notice variant=\"success\">\n  این مقادیر به صورت رمزگذاری شده می‌باشند و تنها برای کاربرانی که به برنامه‌ی\n  شما دسترسی دارند قابل مشاهد است. بنابراین می‌توانید از داده‌های حساس مانند\n  توکن یا کلیدهای خصوصی استفاده کنید.\n</Notice>\n\n- اگر یک متغیر (ENV) با نام `DB_URL` ایجاد می‌کنید، در سورس برنامه‌ی شما به صورت\n  `process.env.DB_URL` در دسترس خواهد بود.\n\n## ویرایش متغییر محلی\n\nبرای ویرایش متغیرهای محلی می‌بایست بر روی آیکون **ویرایش** متغیر مورد نظر کلیک کنید و بعد از اعمال تغییرات دکمه ** نارنجی ** را فشار دهید تا تغییرات ذخیره گردند.\n\n![update environment variable](/images/apps-e‌nvironments-update-env.jpg)\n\n## حذف متغیر محلی\n\nبرای حذف یک متغیر محلی، باید بر روی آیکون ** حذف ** کلیک کنید تا به رنگ قرمز تغییر کند. سپس با کلیک دوباره بر روی آیکون، متغیر مورد نظر حذف می‌گردد.\n\n![delete environment variable](/images/apps-e‌nvironments-delete-env.jpg)\n\n## راه‌اندازی برنامک\n\nبرای اینکه تغییرات جدید بر روی برنامه شما اعمال شود می‌توانید یکی از دو راه زیر را انتخاب نمایید:\n\nاز قسمت ‌‌[داشبورد](https://cloud.fing.ir) و بخش ** نمای کلی ** بر روی دکمه ** ریستارت ** کلیک کنید.\n\n![apply environment changes](/images/apps-e‌nvironments-start.jpg)\n\nیا از طریق ترمینال و در ریشه اصلی برنامه‌ی خود‌، دستور `fing up` را وارد کنید.\n\n```bash\n$ fing up\n```\n"},{"name":"fing-api","title":"API","description":"چگونه از API فینگ استفاده کنیم؟","href":"/references/fing-api","content":"\n# نمای کلی\n\nساختار API به توسعه دهندگان این امکان را می دهد تا **فینگ** را با سایر خدمات خودکار، گسترش و ترکیب کنند. می‌توانید از **API فینگ** برای **ایجاد**، **لیست**، **دیپلوی**، **روشن** و ... **برنامه‌ها** ، برای **ساخت**، **mount** و **unmount** کردن **دیسک‌ها** و همچنین برای مشاهده لیست **پلن‌ها** و انجام کارهای دیگری که قبلاً فقط با **فینگ CLI** یا **داشبورد** انجام می‌شد، استفاده کنید.\n\n## احراز هویت\n\nبرای استفاده کردن از **API فینگ** باید هر درخواست دارای توکن** احراز هویت** باشد که با کلید `Authorization: Bearer {token}` ارسال می‌شود. برای این منظور از [داشبورد](https://cloud.fing.ir/account) برنامه، قسمت **پروفایل** خود، گزینه‌ی **حساب کاربری** را انتخاب کرده و بر روی ** ایجاد توکن جدید** کلیک نمایید. سپس نامی برای **توکن** خود وارد کنید.\n\n![create token](/images/create-token.jpg)\n\nبرای استفاده از **توکن** ساخته شده در هر ** endpoint** ، به روش زیر عمل کنید:\n\n```json\n\"Accept\": \"application/json\"\n\"Authorization\": `Bearer {token}`\n```\n\n## استفاده از توکن در مسیرهای\n\nبرای استفاده از **API فینگ** باید درخواست‌‌های شما به این آدرس باشد:\n`https://cloud.fing.ir`\n\n### برنامه‌ها\n\nبرای اینکه بتوانید در مسیرهای مختلف **برنامه** از **API فینگ** استفاده کنید، به روش زیر انجام دهید:\n\n#### ایجاد برنامه\n\n```\nPOST: /v1/apps\n```\n\n- ورودی:\n\n```json\n{\n  \"label\": \"app-name\",\n  \"plan_id\": \"2\",\n  \"platform\": \"node\",\n  \"region\": \"iran\"\n}\n```\n\n- خروجی:\n\n```json\n{\n  \"id\": 30846,\n  \"name\": \"app-name\",\n  \"label\": \"app-name\",\n  \"platform\": \"node\",\n  \"package\": \"\",\n  \"port\": 80,\n  \"kind\": \"web\",\n  \"region\": \"iran\",\n  \"cpu\": 0.15,\n  \"memory\": 0.2,\n  \"storage\": 2,\n  \"created_at\": \"2022-05-19T07:53:24.000Z\"\n}\n```\n\n#### لیست برنامه\n\n```\nGET: /v1/apps\n```\n\n- خروجی:\n\n```json\n[\n  {\n    \"id\": 30846,\n    \"name\": \"app-name\",\n    \"label\": \"app-name\",\n    \"platform\": \"next\",\n    \"package\": \"\",\n    \"kind\": \"web\",\n    \"region\": \"iran\",\n    \"port\": 80,\n    \"published_ports\": [39066],\n    \"status\": \"running\",\n    \"image\": \"\",\n    \"resources\": { \"cpu\": 0.15, \"memory\": 0.2, \"storage\": 2 },\n    \"url\": \"https://app-name.onfing.ir\",\n    \"created_at\": \"2022-05-19T07:53:24.000Z\",\n    \"hourly_price\": 261,\n    \"monthly_price\": 190000,\n    \"env\": [],\n    \"domains\": [\n      {\n        \"id\": 2311,\n        \"name\": \"app-name.onfing.ir\",\n        \"valid\": true,\n        \"tls\": true,\n        \"only_tls\": true,\n        \"disabled\": false,\n        \"records\": []\n      }\n    ]\n  }\n]\n```\n\n#### حذف برنامه\n\n```\nDELETE: /v1/apps/{app-name}\n```\n\n- خروجی:\n\n```json\n{}\n```\n\n#### تغییر پلن برنامه\n\n```\nPOST: /v1/apps/{app-name}/change-plan\n```\n\n- ورودی:\n\n```json\n{\n  \"plan_id\": 2,\n  \"expand_storage\": true // در صورتی که قصد افزایش هارد برنامه را دارید\n}\n```\n\n- خروجی:\n\n```json\n{}\n```\n\n#### استارت برنامه\n\n```\nPOST: /v1/apps/{app-name}/start\n```\n\n- خروجی:\n\n```json\n{}\n```\n\n#### خاموش کردن برنامه\n\n```\nPOST: /v1/apps/{app-name}/shutdown\n```\n\n- خروجی:\n\n```json\n{}\n```\n\n#### ری‌استارت کردن برنامه\n\n```\nPOST: /v1/apps/{app-name}/restart\n```\n\n- خروجی:\n\n```json\n{}\n```\n\n####\n\n#### دیپلوی برنامه\n\n```\nPOST: /v1/apps/{app-name}/deployments\n```\n\n- ورودی:\n\n```json\n{\n  \"type\":  [] // یکی از این تایپ‌‌ها باشد: \"integration\", \"url\", \"image\",\n  \"files\": [],\n  \"config\": {}\n}\n```\n\n- خروجی:\n\n```json\n{\n  \"id\": \"3084\",\n  \"platform\": \"node\",\n  \"image\": \"registry.fing.ir/app-name:v108-2la9a098m2ks\",\n  \"port\": \"3000\",\n  \"started_at\": \"2022-05-19T08:53:04.000Z\",\n  \"finished_at\": \"2022-05-19T08:56:14.000Z\",\n  \"status\": \"finished\",\n  \"url\": \"\",\n  \"created_at\": \"2022-05-19T08:45:24.000Z\"\n}\n```\n\n### استقرار‌ها\n\nمی‌توانید با **فینگ API** لیست استقرارهای برنامه خود را مشاهده کنید.\n\n#### لیست استفرار\n\n```\nGET: /v1/apps/{app-name}/deployments\n```\n\n- خروجی:\n\n```json\n[\n  {\n    \"id\": \"3084\",\n    \"platform\": \"node\",\n    \"image\": \"registry.fing.ir/app-name:v108-2la9a098m2ks\",\n    \"port\": \"3000\",\n    \"started_at\": \"2022-05-19T08:53:04.000Z\",\n    \"finished_at\": \"2022-05-19T08:56:14.000Z\",\n    \"status\": \"finished\",\n    \"url\": \"https://app-name.onfing.ir\",\n    \"created_at\": \"2022-05-19T08:45:24.000Z\"\n  }\n]\n```\n\n#### لاگ‌های استفرار\n\n```\nGET: /v1/apps/{app-name}/deployments/{deployment-id}\n```\n\n-  خروجی:\n\n```json\n{\n  \"deployment\": {\n    \"id\": \"3084\",\n    \"platform\": \"node\",\n    \"image\": \"registry.fing.ir/app-name:v108-2la9a098m2ks\",\n    \"port\": \"3000\",\n    \"started_at\": \"2022-05-19T08:53:04.000Z\",\n    \"finished_at\": \"2022-05-19T08:56:14.000Z\",\n    \"status\": \"finished\",\n    \"url\": \"https://app-name.onfing.ir\",\n    \"created_at\": \"2022-05-19T08:45:24.000Z\"\n  },\n  \"logs\": [\n    {\n      \"id\": 108864,\n      \"deployment_id\": 3084,\n      \"level\": \"info\",\n      \"message\": \"# Executing 12 build trigger\",\n      \"created_at\": \"2022-05-19T08:46:14.000Z\",\n      \"updated_at\": \"2022-05-19T08:46:14.000Z\"\n    },\n    {\n      \"id\": 108872,\n      \"deployment_id\": 3048,\n      \"level\": \"info\",\n      \"message\": \"\u001b[1;32m==> Installing packages using 'yarn install'\u001b[0m\",\n      \"created_at\": \"2022-05-19T08:49:12.000Z\",\n      \"updated_at\": \"2022-05-19T08:49:12.000Z\"\n    }\n  ]\n}\n```\n\n### دیسک‌ها\n\nمی‌توانید با استفاده از **API فینگ** به مسیرهای **دیسک‌ها** دسترسی داشته باشید:\n\n#### ساخت دیسک‌\n\n```\nPOST: /v1/apps/{app-name}/disks\n```\n\n- ورودی:\n\n```json\n{\n  \"name\": \"disk-name\"\n}\n```\n\n- خروجی:\n\n```json\n[\n  {\n    \"id\": 8592,\n    \"name\": \"disk-name\",\n    \"destination\": \"\",\n    \"mounted\": false,\n    \"used\": 4096,\n    \"created_at\": \"2022-05-19T09:35:22.000Z\",\n    \"ftp\": {}\n  }\n]\n```\n\n#### لیست دیسک‌ها\n\n```\nGET: /v1/apps/{app-name}/disks\n```\n\n- خروجی:\n\n```json\n[\n  {\n    \"id\": 8592,\n    \"name\": \"disk-name\",\n    \"destination\": \"/test/123\",\n    \"mounted\": false,\n    \"used\": 4096,\n    \"created_at\": \"2022-02-22T10:45:08.000Z\",\n    \"ftp\": {\n      \"id\": 70377,\n      \"disk_id\": 8592,\n      \"username\": \"small_queen_IxLLm\",\n      \"password\": \"password\",\n      \"hostname\": \"ftp.fing.ir\",\n      \"port\": \"2022\",\n      \"created_at\": \"2022-02-25T11:35:18.000Z\"\n    }\n  }\n]\n```\n\n#### mount کردن دیسک‌\n\n```\nPOST: /v1/apps/{app-name}/disks/{disk-id}/mount\n```\n\n- خروجی:\n\n```json\n{}\n```\n\n#### unmount کردن دیسک‌\n\n```\nPOST: /v1/apps/{app-name}/disks/{disk-id}/unmount\n```\n\n- خروجی:\n\n```json\n{}\n```\n\n#### حذف دیسک‌\n\n```\nPOST: /v1/apps/{app-name/disks/{disk-id}\n```\n\n- خروجی:\n\n```json\n{}\n```\n\n### پلن‌ها\n\n**فینگ API** این امکان را می‌دهد که بتوانید لیست پلن‌های موجود در فینگ را مشاهد نمایید.\n\n```\nGET: /v1/plans\n```\n\n- خروجی:\n\n```json\n[\n  {\n    \"id\": 2,\n    \"region\": \"iran\",\n    \"name\": \"micro\",\n    \"cpu\": 0.15,\n    \"memory\": 0.2,\n    \"storage\": 2,\n    \"available\": true,\n    \"sort\": 2,\n    \"created_at\": \"2022-01-10T13:40:05.000Z\",\n    \"updated_at\": \"2022-05-11T19:02:39.000Z\",\n    \"hint\": \"مناسب برای برنامه‌های سبک مانند Go\",\n    \"hourly_price\": 261,\n    \"monthly_price\": 190000\n  },\n  {\n    \"id\": 4,\n    \"region\": \"iran\",\n    \"name\": \"small\",\n    \"cpu\": 0.5,\n    \"memory\": 1,\n    \"storage\": 10,\n    \"available\": true,\n    \"sort\": 4,\n    \"created_at\": \"2022-01-10T13:40:05.000Z\",\n    \"updated_at\": \"2022-03-15T13:22:35.000Z\",\n    \"hint\": \"مناسب برنامه‌های نسبتا بزرگ\",\n    \"hourly_price\": 1096,\n    \"monthly_price\": 800000\n  },\n  {\n    \"id\": 6,\n    \"region\": \"iran\",\n    \"name\": \"large\",\n    \"cpu\": 2,\n    \"memory\": 4,\n    \"storage\": 40,\n    \"available\": true,\n    \"sort\": 6,\n    \"created_at\": \"2022-01-10T13:40:05.000Z\",\n    \"updated_at\": \"2022-03-15T13:23:14.000Z\",\n    \"hint\": \"مناسبت همه پلتفورم‌ها\",\n    \"hourly_price\": 4384,\n    \"monthly_price\": 3200000\n  }\n]\n```\n"},{"name":"logs","title":"لاگ‌ها","description":"نمایش زنده لاگ‌های برنامه در سکوی ابری فینگ از طریق داشبورد و ترمینال","href":"/references/logs","content":"\n# لاگ‌ها\n\n** فینگ** این امکان را برای کاربران خود فراهم می‌کند که بتوانند بصورت زنده در جریان روند برنامه‌های خود باشند.\nبا دو روش می‌توانید لاگ‌های برنامه‌ی خود را مشاهده کنید:\n\n## داشبورد فینگ\n\nاز قسمت [داشبورد](https://cloud.fing.ir) برنامه مورد نظر خود را انتخاب کنید.\n\n![app logs](/images/apps-choose.jpg)\n\nسپس بر روی گزینه ** لاگ‌ها** کلیک کنید تا وارد صفحه لاگ برنامه‌ی خود شوید.\n\n![click logs button](/images/apps-logs-view.jpg)\n\n## ترمینال\n\nفینگ این امکان را به شما می‌دهد که بتوانید از طریق ترمینال، لاگ‌های برنامه‌ی خود را مشاهده کنید، برای این منظور کافیست ترمینال‌تان را باز کرده و دستور زیر را وارد نمایید:\n\n```bash\n$ fing logs [flags]\n\n```\n\nبرای کسب اطلاعات بیشتر به قسمت [دستورات](/references/commands#logs) مراجعه کنید.\n"},{"name":"overview","title":"Overview","description":"در این سند نحوه ایجاد برنامه و تنظیمات آن بر روی سکوی ابری فینگ توضیح داده است.","href":"/references/overview","content":"\nimport { Notice } from \"components/Notice\";\n\n# بررسی اجمالی برنامه‌ها\n\nبرای اینکه بتوانید سرویس خود را در فینگ مستقر کنید، باید یک برنامه ایجاد کنید. برنامه یک ساختار منطقی هست که **deployment**‌ها و ** دامنه‌های سفارشی** را گروه بندی می‌کند.\n\n## ایجاد برنامه\n\nبرای اینکه بتوانید برنامه خود را ایجاد کنید، از داشبورد فینگ، روی دکمه [ ساخت برنامه جدید ](https://cloud.fing.ir) کلیک کنید.\n\n## تنظیمات برنامه\n\nبرای ویرایش تنظیمات برنامه، می‌توانید از قسمت [داشبورد](https://cloud.fing.ir)، برنامه مورد نظر خود را انتخاب کنید.\n\n## تنظیمات عمومی\n\n### نام برنامه\n\nنام برنامه فقط می‌تواند شامل ۱۰۰ کاراکتر از حروف کوچک انگلیسی و خط تیره [a-z] باشد. که از خط تیره فقط می‌توانید بین حروف استفاده کنید.\n\n### دامنه‌های سفارشی\n\nمی‌توانید برای هر برنامه، دامنه‌های مخصوص به آن را اضافه کنید. پیکربندی دامنه‌‌های هر برنامه، در همان بخش ** دامنه‌ها** در دسترس می‌باشد. برای کسب اطلاعات بیشتر به قسمت [مدیریت دامنه‌ها](/references/domains) مراجعه کنید.\n\n### متغیرها\n\nمتغیرهای هر برنامه را می‌توانید مستقیماً از همان قسمت ** متغیرها** پیکربندی کنید. برای کسب اطلاعات بیشتر به بخش [متغیرها](/references/environment-variables) مراجعه کنید.\n\n### حذف برنامه\n\n<Notice variant=\"warning\">\n  با حذف برنامه، تمامی استقرارها، متغیر‌ها، دیسک‌ها و دامنه‌های موجود آن نیز حذف\n  خواهند شد. بنابر این از حذف برنامه خود اطمینان حاصل کنید.\n</Notice>\n\nبرای حذف یک برنامه، از [داشبورد](https://cloud.fing.ir) وارد قسمت ** برنامه‌ها** شوید و بر روی سه نقطه‌ی کنار دامنه‌ی برنامه کلیک کنید. بعد از نمایش آیکون ** حذف** بر روی آن کلیک کنید\n\n![delete app](/images/apps-overview-choose-app.jpg)\n\nدر این مرحله، پنجره‌ای نمایش داده می‌شود که شما باید نام کامل برنامه‌ای که می‌خواهید حذف کنید را وارد کرده و بر روی دکمه ** حذف کن** کلیک کنید.\n\n![delete app confirmation](/images/apps-overview-delete.jpg)\n\nبا انجام این کار، برنامه شما با موفقیت حذف خواهد شد.\n"},{"name":"gitea","title":"Gitea","description":"نحوه‌ی راه‌اندازی و نصب برنامه Gitea بر روی سکوی ابری فینگ.","href":"/service/gitea","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\nimport { Notice } from \"components/Notice\";\n\n<Platform>\n  <PlatformHead title=\"برنامه Gitea\" icon=\"gitea/gitea-original.svg\" />\n</Platform>\n\n# مراحل نصب Gitea در فینگ\n\n\n## Gitea چیست؟\n**Gitea** به مانند **گیت‌هاب** و **گیت‌لب** یک سرویس **Git** می‌باشد. که توسط جامعه توسعه دهندگان علاقه‌مند به پروژه‌های متن باز تحت لایسنس MIT توسعه یافته است.\nهدف گیتی ارائه آسانترین و سریعترین راه برای راه‌اندازی سرویس **Git** می‌باشد که به زبان **Go** نوشته شده است.\nو در تمام سیستم عامل‌‌ها و معماری‌‌هایی که **Go** را پشتیبانی می‌کنند مثل **Linux**، **macOS**، **Windows** و در معماری‌هایی مثل **amd64**، **ARM** و **PowerPC** قابل اجرا می‌باشد.\n\n- از قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی دکمه **ساخت برنامه جدید** کلیک کرده و گزینه **برنامه‌‌های آماده** را انتخاب کنید.\n\n![create service](/images/service-create.jpg)\n\n- بر روی برنامه **gitea** کلیک کنید.\n\n![choose gitea service on fing](/images/service-choose-gitea.jpg)\n\n- نام برنامه، نسخه gitea که می‌خواهید نصب شود و دیتابیس آن را انتخاب نمایید.\n\n![create gitea service on fing](/images/service-create-gitea.jpg)\n\n<Notice variant=\"info\">\n  سرویس <b>gitea</b> برای اجرا شدن نیاز به یک دیتابیس دارد. شما می‌توانید به{\" \"}\n  <b>فینگ</b> این اجازه را بدهید که به صورت اتوماتیک یک دیتابیس جداگانه برای آن\n  راه‌اندازی کند، که در این صورت تمام کانفیگ‌های آن خودکار انجام خواهد شد. و یا\n  می‌توانید از دیتابیس آماده دیگری استفاده کنید.\n</Notice>\n\n- در پایان پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا سرویس gitea شما در کمترین زمان ممکن راه‌اندازی شود.\n\n![choose plan](/images/choose-plan.jpg)\n\n## نحوه‌ی اتصال به دیتابیس\n\nبعد از اتمام مراحل نصب و راه‌اندازی، بر روی گزینه **برنامه‌ها** کلیک کنید تا به صفحه‌ی لیست برنامه‌‌ها وارد شوید. با کلیک کردن بر روی دیتابیس ساخته شده، وارد آن شده و گزینه‌ی **ترمینال** را انتخاب کنید و بوسیله دستور زیر یک دیتابیس بر روی آن ایجاد کنید:\n\n```terminal\n  $ mysql -u root --host lime.ir.fing.ir --port 32666 -p qo27AieKIFqrYQwLuwmM0ZIHy8RSCo6M\n```\n\nبعد از کانکت شدن به دیتابیس، دستور ساخت دیتابیس را وارد کرده و یک نام برای آن انتخاب کنید:\n\n```\nmysql> create database my_database_name;\nQuery OK, 1 row affected (0.03 sec)\n```\n\nبا دستور زیر هم می‌توانید دیتابیس‌های خود را مشاده کنید:\n\n```bash\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| brainy_calm        |\n| my_database_name     |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n6 rows in set (0.03 sec)\n```\n\n## مشاهده خروجی\n\nاز قسمت لیست برنامه‌ها، برنامه ‌**gitea** خود را انتخاب کرده و بر روی لینک اختصاصی خود کلیک کنید تا به صحفه‌ی تنظیمات گیتی منتقل شوید.\nدر این قسمت دیتابیس ساخته شده که همان `my_database_name` را در فیلد **Database Name** وارد نمایید.\nو همچنین می‌توانید لینک اختصاصی خود را در فیلد **Gitea Base URL** قرار دهید و بعد از تنظیم کردن کانفیگ‌ها، دکمه **Install Gitea** را فشار دهید تا سرویس **gitea** شما با موفقیت نصب گردد.\n\n![service url](/images/service-gitea-url.jpg)\n\n- شما می‌توانید با مراجعه به قسمت [دامنه‌ها](/references/domains)، دامنه اختصاصی خود را به برنامه‌تان متصل نمایید.\n"},{"name":"minio","title":"Minio","description":"نحوه‌ی راه‌اندازی برنامه Minio بر روی سکوی ابری فینگ.","href":"/service/minio","content":"\nimport { PlatformHead, Platform } from \"components/PlatformHead\";\n\n<Platform>\n  <PlatformHead title=\"برنامه Minio\"  icon=\"minio/minio-original.png\" />\n</Platform>\n\n# مراحل نصب Minio در فینگ\n\n- از قسمت [داشبورد](https://cloud.fing.ir) وارد بخش **برنامه‌ها** شوید و بر روی دکمه **ساخت برنامه جدید** کلیک کرده و گزینه **برنامه‌‌های آماده** را انتخاب کنید.\n\n![create service](/images/service-create.jpg)\n\n- بر روی برنامه **Minio** کلیک کنید.\n\n![choose minio service](/images/service-choose-minio.jpg)\n\n- نام برنامه، نسخه minio که می‌خواهید نصب شود را انتخاب نمایید.\n\n![create minio service on fing](/images/service-minio-create.jpg)\n\n- در پایان پلن مورد نیاز خود را انتخاب کرده و بر روی دکمه **ایجاد برنامه** کلیک کنید تا سرویس minio شما در کمترین زمان ممکن راه‌اندازی شود.\n\n![choose plan](/images/choose-plan.jpg)\n\n## مشاهده خروجی\n\nبعد از اتمام مراحل نصب و راه‌اندازی، فینگ برای شما یک زیر دامنه‌‌ای‌ با عنوان `https://minio.onfing.ir` اختصاص می‌دهد که می‌توانید با کلیک کردن بر روی آن، سرویس **mino** خود را مشاهده نمایید.\n\n- همچنین شما می‌توانید از قسمت [دامنه‌ها](/references/domains) برای سرویس خود دامنه‌ی اختصاصی متصل کنید.\n"}]